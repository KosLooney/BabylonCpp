Stack trace (most recent call last):
#18   Object "", at 0xffffffffffffffff, in 
#17   Object "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/build/bin/BabylonStudio", at 0x409069, in _start
#16   Source "/build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c", line 310, in __libc_start_main [0x7fc908673b96]
#15   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonStudio/main.cpp", line 62, in main [0x40e1fc]
         59:   };
         60: #endif
         61: 
      >  62:   runBabylonStudio(scene, options);
         63:   return 0;
         64: }
#14   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 405, in BABYLON::runBabylonStudio(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions) [0x7fc90c1f0c8c]
        402: #endif
        403:   std::shared_ptr<BABYLON::IRenderableScene> sceneNotNull =
        404:     scene ? scene : std::make_shared<EmptyScene>();
      > 405:   app.RunApp(sceneNotNull, options);
        406: }
        407: 
        408: } // namespace BABYLON
#13   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 78, in BABYLON::BabylonStudioApp::RunApp(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions const&) [0x7fc90c1f1769]
         75:     _appContext._options._appWindowParams.InitialDockLayoutFunction = [this](ImGuiID mainDockId) {
         76:       _studioLayout.PrepareLayout(mainDockId);
         77:     };
      >  78:     ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(
         79:       _appContext._options._appWindowParams,
         80:       showGuiLambda,
         81:       initSceneLambda
#12   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 284, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7fc90c2344f5]
        281: #ifdef EMSCRIPTEN
        282:   InvokeRunnerBabylonEmscripten(appWindowParams, guiFunctionWithExit, postInitFunction);
        283: #elif defined(IMGUI_RUNNER_USE_SDL)
      > 284:   InvokeRunnerBabylonSdl(appWindowParams, guiFunctionWithExit, postInitFunction);
        285: #elif defined(IMGUI_RUNNER_USE_GLFW)
        286:   InvokeRunnerBabylonGlfw(appWindowParams, guiFunctionWithExit, postInitFunction);
        287: #else
#11 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 252, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>)
    |   250:     postInitFunction
    |   251:   );
    | > 252:   runner_babylon.Run();
    |   253:   BABYLON::asio::Service_Stop();
    |   254: }
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 215, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7fc90c234258]
        213: void RunnerBabylon::Run()
        214: {
      > 215:   mAbstractRunner->Run();
        216: }
        217: 
        218: void RunnerBabylon::ResetDockLayout()
#10   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 194, in ImGui::ImGuiRunner::AbstractRunner::Run() [0x7fc90c262447]
        191: {
        192:   FullInit();
        193:   while(!mExitRequired)
      > 194:     LoopProc();
        195:   Cleanup();
        196: }
#9  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 176, in ImGui::ImGuiRunner::AbstractRunner::LoopProc()
    |   174:   ImGui::NewFrame();
    |   175: 
    | > 176:   bool exitRequired = ShowGui();
    |   177:   if (exitRequired)
    |   178:     mExitRequired = true;
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in ImGui::ImGuiRunner::AbstractRunner::LoopProc() [0x7fc90c2623ce]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#8  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 301, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&)
    |   299:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   300:       {
    | > 301: 	return (*_Base::_M_get_pointer(__functor))(
    |   302: 	    std::forward<_ArgTypes>(__args)...);
    |   303:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 202, in ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2::operator()() const
    |   200:     }
    |   201:     provideWindowOrDock();
    | > 202:     bool shouldExit = guiFunctionWithExitCopy();
    |   203: 
    |   204:     if (mAppWindowParams.DefaultWindowType != DefaultWindowTypeOption::NoDefaultWindow) {
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&) [0x7fc90c2347f3]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#7    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 57, in operator() [0x7fc90c1f2956]
         54:     _appContext._options._appWindowParams.ShowMenuBar = true;
         55: 
         56:     auto showGuiLambda = [this]() -> bool {
      >  57:       bool r = this->render();
         58:       for (auto f : _appContext._options._heartbeatCallbacks)
         59:         f();
         60:       if (_appContext._options._playgroundCompilerCallback) {
#6    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 219, in BABYLON::BabylonStudioApp::render() [0x7fc90c1f2d0b]
        216:     registerRenderFunctions();
        217: 
        218:     bool shallExit = renderMenu();
      > 219:     _studioLayout.renderGui();
        220: 
        221:     handleLoopSamples();
#5  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio_layout.cpp", line 44, in BABYLON::BabylonStudioLayout::renderGui()
    |    42:       bool visible = true;
    |    43:       ImGui::Begin(dockableWindowInfo.Label.c_str(), &visible);
    | >  44:       dockableWindowInfo.RenderFunction();
    |    45:       ImGui::End();
    |    46:       setVisible(kv.first, visible);
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::BabylonStudioLayout::renderGui() [0x7fc90c1f6914]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#4  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 106, in BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}::operator()() const
    |   104:     _studioLayout.registerGuiRenderFunction(
    |   105:       DockableWindowId::Scene3d, 
    | > 106:       [this]() { render3d(); });
    |   107:     
    |   108:     _studioLayout.registerGuiRenderFunction(
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 306, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&) [0x7fc90c1f3b06]
        303:     sceneSize.y -= 35.f;
        304:     sceneSize.x = (float)((int)((sceneSize.x) / 4) * 4);
        305:     ImVec2 cursorPosBeforeScene3d = ImGui::GetCursorScreenPos();
      > 306:     _appContext._sceneWidget->render(sceneSize);
        307:     renderHud(cursorPosBeforeScene3d);
        308:   }
#3    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/imgui_scene_widget.cpp", line 66, in BABYLON::ImGuiSceneWidget::render(ImVec2) [0x7fc90c1f8410]
         64:   void ImGuiSceneWidget::render(ImVec2 size)
         65:   {
      >  66:     BABYLON::asio::HeartBeat_Sync();
         67: 
         68:     // Resize framebuffer if needed 
         69:     int width = static_cast<int>(size.x);
#2  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/asio/internal/sync_callback_runner.cpp", line 50, in BABYLON::asio::sync_callback_runner::HeartBeat()
    |    48:     if (callback) {
    |    49:       BABYLON_LOG_DEBUG("sync_callback_runner", "Calling one callback, remaining ", nbRemainingCallback);
    | >  50:       callback();
    |    51:     }
    |    52:     else
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::asio::sync_callback_runner::HeartBeat() [0x7fc90b7ecfb1]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#1  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (std::vector<unsigned char, std::allocator<unsigned char> > const&), BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_7>::_M_invoke(std::_Any_data const&, std::vector<unsigned char, std::allocator<unsigned char> > const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/misc/file_tools.cpp", line 366, in BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_7::operator()(std::vector<unsigned char, std::allocator<unsigned char> > const&) const
    |   364:     auto onSuccessWrapper = [onSuccess](const ArrayBuffer& data) {
    |   365:       if (onSuccess)
    | > 366:         onSuccess(data, dummyResponseUrl);
    |   367:     };
    |   368:     asio::LoadUrlAsync_Binary(url_clean, onSuccessWrapper, onErrorWrapper, onProgressWrapper);
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<void (std::vector<unsigned char, std::allocator<unsigned char> > const&), BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_7>::_M_invoke(std::_Any_data const&, std::vector<unsigned char, std::allocator<unsigned char> > const&) [0x7fc90bc4fc51]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#0  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), BABYLON::CubeTextureExtension::createCubeTexture(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, BABYLON::Scene*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool, std::function<void (std::optional<BABYLON::CubeTextureData> const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, float, float, std::shared_ptr<BABYLON::InternalTexture> const&, std::vector<std::shared_ptr<BABYLON::IInternalTextureLoader>, std::allocator<std::shared_ptr<BABYLON::IInternalTextureLoader> > > const&)::$_1>::_M_invoke(std::_Any_data const&, std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/engines/extensions/cube_texture_extension.cpp", line 116, in BABYLON::CubeTextureExtension::createCubeTexture(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, BABYLON::Scene*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, bool, std::function<void (std::optional<BABYLON::CubeTextureData> const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, float, float, std::shared_ptr<BABYLON::InternalTexture> const&, std::vector<std::shared_ptr<BABYLON::IInternalTextureLoader>, std::allocator<std::shared_ptr<BABYLON::IInternalTextureLoader> > > const&)::$_1::operator()(std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [0x7fc90b8949f5]
        114:     const auto onloaddata = [=](const std::variant<std::string, ArrayBuffer>& data,
        115:                                 const std::string & /*responseURL*/) -> void {
      > 116:       _this->_bindTextureDirectly(GL::TEXTURE_CUBE_MAP, texture, true);
        117:       loader->loadCubeData(data, texture, createPolynomials, onLoad, onError);
        118:     };
        119:     if (!files.empty() && files.size() == 6) {
Segmentation fault (Address not mapped to object [0x1])
