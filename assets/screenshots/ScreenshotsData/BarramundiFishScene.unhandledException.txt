terminate called after throwing an instance of 'std::runtime_error'
  what():  No camera defined
Stack trace (most recent call last):
#23   Object "", at 0xffffffffffffffff, in 
#22   Object "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/build/bin/BabylonStudio", at 0x409069, in _start
#21   Source "/build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c", line 310, in __libc_start_main [0x7f2e0cad9b96]
#20   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonStudio/main.cpp", line 62, in main [0x40e1fc]
         59:   };
         60: #endif
         61: 
      >  62:   runBabylonStudio(scene, options);
         63:   return 0;
         64: }
#19   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 405, in BABYLON::runBabylonStudio(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions) [0x7f2e10656c8c]
        402: #endif
        403:   std::shared_ptr<BABYLON::IRenderableScene> sceneNotNull =
        404:     scene ? scene : std::make_shared<EmptyScene>();
      > 405:   app.RunApp(sceneNotNull, options);
        406: }
        407: 
        408: } // namespace BABYLON
#18   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 78, in BABYLON::BabylonStudioApp::RunApp(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions const&) [0x7f2e10657769]
         75:     _appContext._options._appWindowParams.InitialDockLayoutFunction = [this](ImGuiID mainDockId) {
         76:       _studioLayout.PrepareLayout(mainDockId);
         77:     };
      >  78:     ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(
         79:       _appContext._options._appWindowParams,
         80:       showGuiLambda,
         81:       initSceneLambda
#17   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 284, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7f2e1069a4f5]
        281: #ifdef EMSCRIPTEN
        282:   InvokeRunnerBabylonEmscripten(appWindowParams, guiFunctionWithExit, postInitFunction);
        283: #elif defined(IMGUI_RUNNER_USE_SDL)
      > 284:   InvokeRunnerBabylonSdl(appWindowParams, guiFunctionWithExit, postInitFunction);
        285: #elif defined(IMGUI_RUNNER_USE_GLFW)
        286:   InvokeRunnerBabylonGlfw(appWindowParams, guiFunctionWithExit, postInitFunction);
        287: #else
#16 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 252, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>)
    |   250:     postInitFunction
    |   251:   );
    | > 252:   runner_babylon.Run();
    |   253:   BABYLON::asio::Service_Stop();
    |   254: }
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 215, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7f2e1069a258]
        213: void RunnerBabylon::Run()
        214: {
      > 215:   mAbstractRunner->Run();
        216: }
        217: 
        218: void RunnerBabylon::ResetDockLayout()
#15   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 194, in ImGui::ImGuiRunner::AbstractRunner::Run() [0x7f2e106c8447]
        191: {
        192:   FullInit();
        193:   while(!mExitRequired)
      > 194:     LoopProc();
        195:   Cleanup();
        196: }
#14 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 176, in ImGui::ImGuiRunner::AbstractRunner::LoopProc()
    |   174:   ImGui::NewFrame();
    |   175: 
    | > 176:   bool exitRequired = ShowGui();
    |   177:   if (exitRequired)
    |   178:     mExitRequired = true;
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in ImGui::ImGuiRunner::AbstractRunner::LoopProc() [0x7f2e106c83ce]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#13 | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 301, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&)
    |   299:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   300:       {
    | > 301: 	return (*_Base::_M_get_pointer(__functor))(
    |   302: 	    std::forward<_ArgTypes>(__args)...);
    |   303:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 202, in ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2::operator()() const
    |   200:     }
    |   201:     provideWindowOrDock();
    | > 202:     bool shouldExit = guiFunctionWithExitCopy();
    |   203: 
    |   204:     if (mAppWindowParams.DefaultWindowType != DefaultWindowTypeOption::NoDefaultWindow) {
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&) [0x7f2e1069a7f3]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#12   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 57, in operator() [0x7f2e10658956]
         54:     _appContext._options._appWindowParams.ShowMenuBar = true;
         55: 
         56:     auto showGuiLambda = [this]() -> bool {
      >  57:       bool r = this->render();
         58:       for (auto f : _appContext._options._heartbeatCallbacks)
         59:         f();
         60:       if (_appContext._options._playgroundCompilerCallback) {
#11   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 219, in BABYLON::BabylonStudioApp::render() [0x7f2e10658d0b]
        216:     registerRenderFunctions();
        217: 
        218:     bool shallExit = renderMenu();
      > 219:     _studioLayout.renderGui();
        220: 
        221:     handleLoopSamples();
#10 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio_layout.cpp", line 44, in BABYLON::BabylonStudioLayout::renderGui()
    |    42:       bool visible = true;
    |    43:       ImGui::Begin(dockableWindowInfo.Label.c_str(), &visible);
    | >  44:       dockableWindowInfo.RenderFunction();
    |    45:       ImGui::End();
    |    46:       setVisible(kv.first, visible);
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::BabylonStudioLayout::renderGui() [0x7f2e1065c914]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#9  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 106, in BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}::operator()() const
    |   104:     _studioLayout.registerGuiRenderFunction(
    |   105:       DockableWindowId::Scene3d, 
    | > 106:       [this]() { render3d(); });
    |   107:     
    |   108:     _studioLayout.registerGuiRenderFunction(
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 306, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&) [0x7f2e10659b06]
        303:     sceneSize.y -= 35.f;
        304:     sceneSize.x = (float)((int)((sceneSize.x) / 4) * 4);
        305:     ImVec2 cursorPosBeforeScene3d = ImGui::GetCursorScreenPos();
      > 306:     _appContext._sceneWidget->render(sceneSize);
        307:     renderHud(cursorPosBeforeScene3d);
        308:   }
#8    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/imgui_scene_widget.cpp", line 90, in BABYLON::ImGuiSceneWidget::render(ImVec2) [0x7f2e1065e498]
         87:       static_cast<float>(_framebuffer_canvas->clientHeight));
         88: 
         89:     _framebuffer_canvas->bind();
      >  90:     _renderableScene->render();
         91:     _framebuffer_canvas->unbind();
         92: 
         93:     auto id = _framebuffer_canvas->textureId();
#7  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/engines/thin_engine.cpp", line 678, in BABYLON::ThinEngine::renderFunction(std::function<void ()> const&)
    |   677:       // Render
    | > 678:       renderFunction();
    |   679: 
    |   680:       // Present
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::ThinEngine::renderFunction(std::function<void ()> const&) [0x7f2e0fd7ca87]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#6    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/engines/scene.cpp", line 3846, in BABYLON::Scene::render(bool, bool) [0x7f2e0fd57530]
       3843:   }
       3844:   else {
       3845:     if (!_activeCamera) {
      >3846:       throw std::runtime_error("No camera defined");
       3847:     }
       3848: 
       3849:     _processSubCameras(_activeCamera);
#5    Object "/usr/lib/x86_64-linux-gnu/libstdc++.so.6", at 0x7f2e0d372d23, in __cxa_throw
#4    Object "/usr/lib/x86_64-linux-gnu/libstdc++.so.6", at 0x7f2e0d372af0, in std::terminate()
#3    Object "/usr/lib/x86_64-linux-gnu/libstdc++.so.6", at 0x7f2e0d372ab5, in std::rethrow_exception(std::__exception_ptr::exception_ptr)
#2    Object "/usr/lib/x86_64-linux-gnu/libstdc++.so.6", at 0x7f2e0d36c956, in 
#1    Source "/build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c", line 79, in __GI_abort [0x7f2e0caf8800]
#0    Source "/build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c", line 51, in __GI_raise [0x7f2e0caf6e97]
Aborted (Signal sent by tkill() 24291 1000)
