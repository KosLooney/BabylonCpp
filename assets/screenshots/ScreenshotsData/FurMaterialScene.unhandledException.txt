Stack trace (most recent call last):
#19   Object "", at 0xffffffffffffffff, in 
#18   Object "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/build/bin/BabylonStudio", at 0x409069, in _start
#17   Source "/build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c", line 310, in __libc_start_main [0x7fd70bf27b96]
#16   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonStudio/main.cpp", line 62, in main [0x40e1fc]
         59:   };
         60: #endif
         61: 
      >  62:   runBabylonStudio(scene, options);
         63:   return 0;
         64: }
#15   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 405, in BABYLON::runBabylonStudio(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions) [0x7fd70faa4c8c]
        402: #endif
        403:   std::shared_ptr<BABYLON::IRenderableScene> sceneNotNull =
        404:     scene ? scene : std::make_shared<EmptyScene>();
      > 405:   app.RunApp(sceneNotNull, options);
        406: }
        407: 
        408: } // namespace BABYLON
#14   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 78, in BABYLON::BabylonStudioApp::RunApp(std::shared_ptr<BABYLON::IRenderableScene> const&, BABYLON::BabylonStudioOptions const&) [0x7fd70faa5769]
         75:     _appContext._options._appWindowParams.InitialDockLayoutFunction = [this](ImGuiID mainDockId) {
         76:       _studioLayout.PrepareLayout(mainDockId);
         77:     };
      >  78:     ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(
         79:       _appContext._options._appWindowParams,
         80:       showGuiLambda,
         81:       initSceneLambda
#13   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 284, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylon(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7fd70fae84f5]
        281: #ifdef EMSCRIPTEN
        282:   InvokeRunnerBabylonEmscripten(appWindowParams, guiFunctionWithExit, postInitFunction);
        283: #elif defined(IMGUI_RUNNER_USE_SDL)
      > 284:   InvokeRunnerBabylonSdl(appWindowParams, guiFunctionWithExit, postInitFunction);
        285: #elif defined(IMGUI_RUNNER_USE_GLFW)
        286:   InvokeRunnerBabylonGlfw(appWindowParams, guiFunctionWithExit, postInitFunction);
        287: #else
#12 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 252, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>)
    |   250:     postInitFunction
    |   251:   );
    | > 252:   runner_babylon.Run();
    |   253:   BABYLON::asio::Service_Stop();
    |   254: }
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 215, in ImGuiUtils::ImGuiRunner::InvokeRunnerBabylonSdl(ImGuiUtils::ImGuiRunner::AppWindowParams const&, std::function<bool ()>, std::function<void ()>) [0x7fd70fae8258]
        213: void RunnerBabylon::Run()
        214: {
      > 215:   mAbstractRunner->Run();
        216: }
        217: 
        218: void RunnerBabylon::ResetDockLayout()
#11   Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 194, in ImGui::ImGuiRunner::AbstractRunner::Run() [0x7fd70fb16447]
        191: {
        192:   FullInit();
        193:   while(!mExitRequired)
      > 194:     LoopProc();
        195:   Cleanup();
        196: }
#10 | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner/abstract_runner.cpp", line 176, in ImGui::ImGuiRunner::AbstractRunner::LoopProc()
    |   174:   ImGui::NewFrame();
    |   175: 
    | > 176:   bool exitRequired = ShowGui();
    |   177:   if (exitRequired)
    |   178:     mExitRequired = true;
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in ImGui::ImGuiRunner::AbstractRunner::LoopProc() [0x7fd70fb163ce]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#9  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 301, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&)
    |   299:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   300:       {
    | > 301: 	return (*_Base::_M_get_pointer(__functor))(
    |   302: 	    std::forward<_ArgTypes>(__args)...);
    |   303:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/imgui_utils/imgui_runner_babylon/runner_babylon.cpp", line 202, in ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2::operator()() const
    |   200:     }
    |   201:     provideWindowOrDock();
    | > 202:     bool shouldExit = guiFunctionWithExitCopy();
    |   203: 
    |   204:     if (mAppWindowParams.DefaultWindowType != DefaultWindowTypeOption::NoDefaultWindow) {
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<bool (), ImGuiUtils::ImGuiRunner::RunnerBabylon::DoInit()::$_2>::_M_invoke(std::_Any_data const&) [0x7fd70fae87f3]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#8    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 57, in operator() [0x7fd70faa6956]
         54:     _appContext._options._appWindowParams.ShowMenuBar = true;
         55: 
         56:     auto showGuiLambda = [this]() -> bool {
      >  57:       bool r = this->render();
         58:       for (auto f : _appContext._options._heartbeatCallbacks)
         59:         f();
         60:       if (_appContext._options._playgroundCompilerCallback) {
#7    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 219, in BABYLON::BabylonStudioApp::render() [0x7fd70faa6d0b]
        216:     registerRenderFunctions();
        217: 
        218:     bool shallExit = renderMenu();
      > 219:     _studioLayout.renderGui();
        220: 
        221:     handleLoopSamples();
#6  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio_layout.cpp", line 44, in BABYLON::BabylonStudioLayout::renderGui()
    |    42:       bool visible = true;
    |    43:       ImGui::Begin(dockableWindowInfo.Label.c_str(), &visible);
    | >  44:       dockableWindowInfo.RenderFunction();
    |    45:       ImGui::End();
    |    46:       setVisible(kv.first, visible);
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::BabylonStudioLayout::renderGui() [0x7fd70faaa914]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#5  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 106, in BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}::operator()() const
    |   104:     _studioLayout.registerGuiRenderFunction(
    |   105:       DockableWindowId::Scene3d, 
    | > 106:       [this]() { render3d(); });
    |   107:     
    |   108:     _studioLayout.registerGuiRenderFunction(
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/babylon_studio.cpp", line 306, in std::_Function_handler<void (), BABYLON::BabylonStudioApp::registerRenderFunctions()::{lambda()#3}>::_M_invoke(std::_Any_data const&) [0x7fd70faa7b06]
        303:     sceneSize.y -= 35.f;
        304:     sceneSize.x = (float)((int)((sceneSize.x) / 4) * 4);
        305:     ImVec2 cursorPosBeforeScene3d = ImGui::GetCursorScreenPos();
      > 306:     _appContext._sceneWidget->render(sceneSize);
        307:     renderHud(cursorPosBeforeScene3d);
        308:   }
#4    Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonImGui/src/babylon_imgui/imgui_scene_widget.cpp", line 66, in BABYLON::ImGuiSceneWidget::render(ImVec2) [0x7fd70faac410]
         64:   void ImGuiSceneWidget::render(ImVec2 size)
         65:   {
      >  66:     BABYLON::asio::HeartBeat_Sync();
         67: 
         68:     // Resize framebuffer if needed 
         69:     int width = static_cast<int>(size.x);
#3  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/asio/internal/sync_callback_runner.cpp", line 50, in BABYLON::asio::sync_callback_runner::HeartBeat()
    |    48:     if (callback) {
    |    49:       BABYLON_LOG_DEBUG("sync_callback_runner", "Calling one callback, remaining ", nbRemainingCallback);
    | >  50:       callback();
    |    51:     }
    |    52:     else
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in BABYLON::asio::sync_callback_runner::HeartBeat() [0x7fd70f0a0fb1]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#2  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (std::vector<unsigned char, std::allocator<unsigned char> > const&), BABYLON::asio::LoadFileAsync_Text(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (bool, unsigned long, unsigned long)> const&)::$_1>::_M_invoke(std::_Any_data const&, std::vector<unsigned char, std::allocator<unsigned char> > const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/asio/asio.cpp", line 210, in BABYLON::asio::LoadFileAsync_Text(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (bool, unsigned long, unsigned long)> const&)::$_1::operator()(std::vector<unsigned char, std::allocator<unsigned char> > const&) const
    |   208:     };
    |   209:     auto onSuccessFunctionArrayBuffer = [onSuccessFunction](const ArrayBuffer& dataUint8) {
    | > 210:       onSuccessFunction(ArrayBufferToString(dataUint8));
    |   211:     };
    |   212:     service.LoadData(syncLoader, onSuccessFunctionArrayBuffer, onErrorFunction);
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<void (std::vector<unsigned char, std::allocator<unsigned char> > const&), BABYLON::asio::LoadFileAsync_Text(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (bool, unsigned long, unsigned long)> const&)::$_1>::_M_invoke(std::_Any_data const&, std::vector<unsigned char, std::allocator<unsigned char> > const&) [0x7fd70f09aabf]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#1  | Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 316, in std::_Function_handler<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_8>::_M_invoke(std::_Any_data const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
    |   314:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    |   315:       {
    | > 316: 	(*_Base::_M_get_pointer(__functor))(
    |   317: 	    std::forward<_ArgTypes>(__args)...);
    |   318:       }
    | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/misc/file_tools.cpp", line 373, in BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_8::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
    |   371:     auto onSuccessWrapper = [onSuccess](const std::string& data) {
    |   372:       if (onSuccess) {
    | > 373:         onSuccess(data, dummyResponseUrl);
    |   374:       }
    |   375:     };
      Source "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/std_function.h", line 706, in std::_Function_handler<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), BABYLON::FileTools::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::ProgressEvent const&)> const&, bool, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)::$_8>::_M_invoke(std::_Any_data const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [0x7fd70f504159]
        703:     {
        704:       if (_M_empty())
        705: 	__throw_bad_function_call();
      > 706:       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
        707:     }
        708: 
        709: #if __cpp_rtti
#0  | Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/src/loading/scene_loader.cpp", line 196, in operator()
    |   194:   const auto dataCallback
    |   195:     = [=](const std::variant<std::string, ArrayBuffer>& data, const std::string& responseURL) {
    | > 196:         if (scene->isDisposed()) {
    |   197:           onError("Scene has been disposed", "");
    |   198:           return;
      Source "/home/pascal/dvp/BabylonCpp/cmake-build-relwithdebinfo/../src/BabylonCpp/include/babylon/babylon_common.h", line 84, in BABYLON::SceneLoader::_loadData(BABYLON::IFileInfo const&, BABYLON::Scene*, std::function<void (std::variant<std::shared_ptr<BABYLON::ISceneLoaderPlugin>, std::shared_ptr<BABYLON::ISceneLoaderPluginAsync> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void (BABYLON::SceneLoaderProgressEvent const&)> const&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&, std::function<void ()> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_0::operator()(std::variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [0x7fd70f2bb306]
         82:   T operator()() const
         83:   {
      >  84:     return (_object->*_getter)();
         85:   }
         86: 
         87: private:
Segmentation fault (Signal sent by the kernel [(nil)])
