#ifndef BABYLON_SAMPLES_AUTO_DECL_H    
#define BABYLON_SAMPLES_AUTO_DECL_H

// This file is generated automatically at each build. Do not modify it manually.

#include <babylon/interfaces/irenderable_scene.h>
#include <babylon/samples/samples_index.h>

#include <memory>

namespace BABYLON
{
namespace Samples
{
std::shared_ptr<IRenderableScene> make_AnimatedMorphTargetScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_Animations101Scene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AnimationsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoneRotationInWorldSpaceScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BouncingCubeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CannonBallScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CartoonAnimationsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_EasingFunctionsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShapeEasingsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MorphMeshScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MorphTargetsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PickAndPlayAnimationScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PumpJackScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TubeAnimationScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CamerasTypesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FollowCameraScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MultiViewsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RollercoasterScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CollisionsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_IntersectionsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HexIcoSphereScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene01(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene02(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene03(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene04(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene05(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene06(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene07(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene08(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene09(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene10(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdSimulationScene11(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CrowdsAndNavigationAgents(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PerlinNoiseWavesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolyhedraScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleOakTreeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimplePineScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_KeyboardAndGameLoopScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PickingScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DirectionalLightScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HemisphericLightScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_IntersectingLightsColorsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LightProjectedTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LightsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PointLightScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimultaneousLightsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SpotLightScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportBabylonJSLogoScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportCandleScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportDudeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportDummy3Scene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportHillValleyScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportMeshesSkullScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportRabbitScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImportSuzanneScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AlphaBlendModeTestScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AnimatedCubeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AntiqueCameraScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CubeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SciFiHelmetScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SuzanneScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TwoSidedPlaneScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxInterleavedScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxTexturedNonPowerOfTwoScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxTexturedScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxVertexColorsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DuckScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ReciprocatingSawScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TwoCylinderEngineScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AvocadoScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BarramundiFishScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoomBoxScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CorsetScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DamagedHelmetScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FlightHelmetScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LanternScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_WaterBottleScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AnimatedMorphCubeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AnimatedMorphSphereScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AnimatedTriangleScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CamerasSceneGltf(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_InterpolationTestScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleMaterialGLTFScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleMeshesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleMorphScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleSkinScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleSparseAccessorScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TriangleScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TriangleWithoutIndicesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FresnelParametersTorusKnotScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GlossinessAndRoughnessScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MaterialsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MultiMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMaterialCheckerOrmScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMaterialOrmWoodScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMetallicRoughnessGoldMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMetallicRoughnessMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrMetallicRoughnessTextureMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrReflectionScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrSpecularGlossinessMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PbrSpecularGlossinessTextureMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialBoxScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialBoxesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialCarvedTreesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialCelebrationOfNewYear2020(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialChainsAndGearsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialCloudsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialCylindersScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialDoubleHelixScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialGeneratorsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialKifsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialLuminescenceScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialMengerSpongeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialMorningCityScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialOperaIslandScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialPbrTestScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialPegasusGalaxyScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialPhysicallyBasedSdfScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialPlanetShadertoyScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSeascapeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialServerRoomScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSimplicityScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSkyboxCloudsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSkyboxScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSparseGridMarchingScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialSpeedTracerScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialStarNestScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialTheDriveHomeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialTilesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialVoronoianWaterwayScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialWarpSpeedScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialWithFogScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialWolfenstein3dScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShaderMaterialXyptonjtrozScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_XRayMaterialWithFresnelSkullScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CellMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CellShadingMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FireMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FloatOnWaterMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FurMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GradientMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GradientMaterialSphereScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GridMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LavaMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MixMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_NormalMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShadowOnlyMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SkyMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TerrainMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TriPlanarMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_WaterMaterialScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_AirplaneModelScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BasicElementsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BasicScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CircleCurvesFromBeziersScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ColoredCubeFacesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ColoredRibbonScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ColoredTriangleScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ConstructiveSolidGeometriesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CubesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CuboidScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CurvedHelixMeshesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DecalsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DisplacementMapCpuScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_EdgesRendererScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ExtrudePolygonScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ExtrudedPolygonScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ExtrusionScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HeightMapScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HouseFromFloorplanScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_IcoSphereScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_InnerMeshPointsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_IsPointInsideMeshScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LatheScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LinesMeshSpiralScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LookAtScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LorenzAttractorScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MandelbrotFractalScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MergedMeshesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MeshNormalsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolygonMeshBirdScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolygonMeshMonkeyScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolygonMeshPuzzlePieceScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolygonMeshStarsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolygonMeshStarsWithHolesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PolyhedronScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RayHelperScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RaycastOnHeightMapScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RibbonScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RotationAndScalingScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimpleCarFollowingPathScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SuperEllipsoidScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TiledGroundScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TubeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxInstancesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BuildingInstancesGridScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ClipPlanesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CubeChaosScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LevelOfDetailScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ManyBoxInstancesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BuildingsSpsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LightedSpsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TrianglesSpsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BrickProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CloudProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FireProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GrassProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MarbleProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PerlinNoiseProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RoadProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_StarfieldProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_WoodProceduralTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BoxShadowScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BulbSelfShadowScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ShadowsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ConvolutionPostProcessScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_DawnBringerScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_EnvironmentScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FadeInOutScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FireworksWithShaderCodeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FogScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_FresnelScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_GlassWubbleBallScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HeatWaveScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HighlightLayerScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_InfiniteLoaderScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_KernelBasedBlurScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LensFlaresScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MotionBlurPostProcessScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PointsCloudScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PortalsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RealtimeReflectionScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RealtimeRefractionScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RefractionAndReflectionDdsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RefractionAndReflectionScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RgbShiftGlitchScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SimplePostProcessRenderPipelineScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SpritesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_VolumetricLightScatteringScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_WaveOfSpritesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_WavesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BlurModeForMirrorsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BumpTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_BumpTextureSpheresScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CubeTextureDifferentFacesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CustomRenderTargetsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_CylinderWithTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_EnvironmentTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_EquirectangularMapAsReflectionTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_HdrCubeTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ImageTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_LocalCubemapsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MirrorTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MirrorsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_MultiSampleRenderTargetsScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_OpacityTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_PhotoDomeScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ProceduralTexturesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_ReflectingOneFaceSpriteTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_RenderTargetTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SphereTexturesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SphereTransparentTexturesScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SphericalPanningScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_SphericalReflectionTextureScene(ICanvas* canvas);
std::shared_ptr<IRenderableScene> make_TwoSidedTextureScene(ICanvas* canvas);

    
template<typename RegisterFunction>
inline void auto_populate_samples(RegisterFunction& registerFunction)
{
  registerFunction("Animations", "AnimatedMorphTargetScene", make_AnimatedMorphTargetScene);
  registerFunction("Animations", "Animations101Scene", make_Animations101Scene);
  registerFunction("Animations", "AnimationsScene", make_AnimationsScene);
  registerFunction("Animations", "BoneRotationInWorldSpaceScene", make_BoneRotationInWorldSpaceScene);
  registerFunction("Animations", "BouncingCubeScene", make_BouncingCubeScene);
  registerFunction("Animations", "CannonBallScene", make_CannonBallScene);
  registerFunction("Animations", "CartoonAnimationsScene", make_CartoonAnimationsScene);
  registerFunction("Animations", "EasingFunctionsScene", make_EasingFunctionsScene);
  registerFunction("Animations", "ShapeEasingsScene", make_ShapeEasingsScene);
  registerFunction("Animations", "MorphMeshScene", make_MorphMeshScene);
  registerFunction("Animations", "MorphTargetsScene", make_MorphTargetsScene);
  registerFunction("Animations", "PickAndPlayAnimationScene", make_PickAndPlayAnimationScene);
  registerFunction("Animations", "PumpJackScene", make_PumpJackScene);
  registerFunction("Animations", "TubeAnimationScene", make_TubeAnimationScene);
  registerFunction("Cameras", "CamerasTypesScene", make_CamerasTypesScene);
  registerFunction("Cameras", "FollowCameraScene", make_FollowCameraScene);
  registerFunction("Cameras", "MultiViewsScene", make_MultiViewsScene);
  registerFunction("Cameras", "RollercoasterScene", make_RollercoasterScene);
  registerFunction("Collisions & intersections", "CollisionsScene", make_CollisionsScene);
  registerFunction("Collisions & intersections", "IntersectionsScene", make_IntersectionsScene);
  registerFunction("Extensions", "HexIcoSphereScene", make_HexIcoSphereScene);
  registerFunction("Extensions", "CrowdSimulationScene01", make_CrowdSimulationScene01);
  registerFunction("Extensions", "CrowdSimulationScene02", make_CrowdSimulationScene02);
  registerFunction("Extensions", "CrowdSimulationScene03", make_CrowdSimulationScene03);
  registerFunction("Extensions", "CrowdSimulationScene04", make_CrowdSimulationScene04);
  registerFunction("Extensions", "CrowdSimulationScene05", make_CrowdSimulationScene05);
  registerFunction("Extensions", "CrowdSimulationScene06", make_CrowdSimulationScene06);
  registerFunction("Extensions", "CrowdSimulationScene07", make_CrowdSimulationScene07);
  registerFunction("Extensions", "CrowdSimulationScene08", make_CrowdSimulationScene08);
  registerFunction("Extensions", "CrowdSimulationScene09", make_CrowdSimulationScene09);
  registerFunction("Extensions", "CrowdSimulationScene10", make_CrowdSimulationScene10);
  registerFunction("Extensions", "CrowdSimulationScene11", make_CrowdSimulationScene11);
  registerFunction("Extensions", "CrowdsAndNavigationAgents", make_CrowdsAndNavigationAgents);
  registerFunction("Extensions", "PerlinNoiseWavesScene", make_PerlinNoiseWavesScene);
  registerFunction("Extensions", "PolyhedraScene", make_PolyhedraScene);
  registerFunction("Extensions", "SimpleOakTreeScene", make_SimpleOakTreeScene);
  registerFunction("Extensions", "SimplePineScene", make_SimplePineScene);
  registerFunction("Interactions & events", "KeyboardAndGameLoopScene", make_KeyboardAndGameLoopScene);
  registerFunction("Interactions & events", "PickingScene", make_PickingScene);
  registerFunction("Ligths", "DirectionalLightScene", make_DirectionalLightScene);
  registerFunction("Ligths", "HemisphericLightScene", make_HemisphericLightScene);
  registerFunction("Ligths", "IntersectingLightsColorsScene", make_IntersectingLightsColorsScene);
  registerFunction("Ligths", "LightProjectedTextureScene", make_LightProjectedTextureScene);
  registerFunction("Ligths", "LightsScene", make_LightsScene);
  registerFunction("Ligths", "PointLightScene", make_PointLightScene);
  registerFunction("Ligths", "SimultaneousLightsScene", make_SimultaneousLightsScene);
  registerFunction("Ligths", "SpotLightScene", make_SpotLightScene);
  registerFunction("Loaders - babylon format", "ImportBabylonJSLogoScene", make_ImportBabylonJSLogoScene);
  registerFunction("Loaders - babylon format", "ImportCandleScene", make_ImportCandleScene);
  registerFunction("Loaders - babylon format", "ImportDudeScene", make_ImportDudeScene);
  registerFunction("Loaders - babylon format", "ImportDummy3Scene", make_ImportDummy3Scene);
  registerFunction("Loaders - babylon format", "ImportHillValleyScene", make_ImportHillValleyScene);
  registerFunction("Loaders - babylon format", "ImportMeshesSkullScene", make_ImportMeshesSkullScene);
  registerFunction("Loaders - babylon format", "ImportRabbitScene", make_ImportRabbitScene);
  registerFunction("Loaders - babylon format", "ImportSuzanneScene", make_ImportSuzanneScene);
  registerFunction("Loaders - glTF format", "AlphaBlendModeTestScene", make_AlphaBlendModeTestScene);
  registerFunction("Loaders - glTF format", "AnimatedCubeScene", make_AnimatedCubeScene);
  registerFunction("Loaders - glTF format", "AntiqueCameraScene", make_AntiqueCameraScene);
  registerFunction("Loaders - glTF format", "CubeScene", make_CubeScene);
  registerFunction("Loaders - glTF format", "SciFiHelmetScene", make_SciFiHelmetScene);
  registerFunction("Loaders - glTF format", "SuzanneScene", make_SuzanneScene);
  registerFunction("Loaders - glTF format", "TwoSidedPlaneScene", make_TwoSidedPlaneScene);
  registerFunction("Loaders - glTF format", "BoxInterleavedScene", make_BoxInterleavedScene);
  registerFunction("Loaders - glTF format", "BoxScene", make_BoxScene);
  registerFunction("Loaders - glTF format", "BoxTexturedNonPowerOfTwoScene", make_BoxTexturedNonPowerOfTwoScene);
  registerFunction("Loaders - glTF format", "BoxTexturedScene", make_BoxTexturedScene);
  registerFunction("Loaders - glTF format", "BoxVertexColorsScene", make_BoxVertexColorsScene);
  registerFunction("Loaders - glTF format", "DuckScene", make_DuckScene);
  registerFunction("Loaders - glTF format", "ReciprocatingSawScene", make_ReciprocatingSawScene);
  registerFunction("Loaders - glTF format", "TwoCylinderEngineScene", make_TwoCylinderEngineScene);
  registerFunction("Loaders - glTF format", "AvocadoScene", make_AvocadoScene);
  registerFunction("Loaders - glTF format", "BarramundiFishScene", make_BarramundiFishScene);
  registerFunction("Loaders - glTF format", "BoomBoxScene", make_BoomBoxScene);
  registerFunction("Loaders - glTF format", "CorsetScene", make_CorsetScene);
  registerFunction("Loaders - glTF format", "DamagedHelmetScene", make_DamagedHelmetScene);
  registerFunction("Loaders - glTF format", "FlightHelmetScene", make_FlightHelmetScene);
  registerFunction("Loaders - glTF format", "LanternScene", make_LanternScene);
  registerFunction("Loaders - glTF format", "WaterBottleScene", make_WaterBottleScene);
  registerFunction("Loaders - glTF format", "AnimatedMorphCubeScene", make_AnimatedMorphCubeScene);
  registerFunction("Loaders - glTF format", "AnimatedMorphSphereScene", make_AnimatedMorphSphereScene);
  registerFunction("Loaders - glTF format", "AnimatedTriangleScene", make_AnimatedTriangleScene);
  registerFunction("Loaders - glTF format", "CamerasSceneGltf", make_CamerasSceneGltf);
  registerFunction("Loaders - glTF format", "InterpolationTestScene", make_InterpolationTestScene);
  registerFunction("Loaders - glTF format", "SimpleMaterialGLTFScene", make_SimpleMaterialGLTFScene);
  registerFunction("Loaders - glTF format", "SimpleMeshesScene", make_SimpleMeshesScene);
  registerFunction("Loaders - glTF format", "SimpleMorphScene", make_SimpleMorphScene);
  registerFunction("Loaders - glTF format", "SimpleSkinScene", make_SimpleSkinScene);
  registerFunction("Loaders - glTF format", "SimpleSparseAccessorScene", make_SimpleSparseAccessorScene);
  registerFunction("Loaders - glTF format", "SimpleTextureScene", make_SimpleTextureScene);
  registerFunction("Loaders - glTF format", "TriangleScene", make_TriangleScene);
  registerFunction("Loaders - glTF format", "TriangleWithoutIndicesScene", make_TriangleWithoutIndicesScene);
  registerFunction("Materials", "FresnelParametersTorusKnotScene", make_FresnelParametersTorusKnotScene);
  registerFunction("Materials", "GlossinessAndRoughnessScene", make_GlossinessAndRoughnessScene);
  registerFunction("Materials", "MaterialsScene", make_MaterialsScene);
  registerFunction("Materials", "MultiMaterialScene", make_MultiMaterialScene);
  registerFunction("Materials", "PbrMaterialCheckerOrmScene", make_PbrMaterialCheckerOrmScene);
  registerFunction("Materials", "PbrMaterialOrmWoodScene", make_PbrMaterialOrmWoodScene);
  registerFunction("Materials", "PbrMaterialScene", make_PbrMaterialScene);
  registerFunction("Materials", "PbrMetallicRoughnessGoldMaterialScene", make_PbrMetallicRoughnessGoldMaterialScene);
  registerFunction("Materials", "PbrMetallicRoughnessMaterialScene", make_PbrMetallicRoughnessMaterialScene);
  registerFunction("Materials", "PbrMetallicRoughnessTextureMaterialScene", make_PbrMetallicRoughnessTextureMaterialScene);
  registerFunction("Materials", "PbrReflectionScene", make_PbrReflectionScene);
  registerFunction("Materials", "PbrSpecularGlossinessMaterialScene", make_PbrSpecularGlossinessMaterialScene);
  registerFunction("Materials", "PbrSpecularGlossinessTextureMaterialScene", make_PbrSpecularGlossinessTextureMaterialScene);
  registerFunction("Shader Material", "ShaderMaterialBoxScene", make_ShaderMaterialBoxScene);
  registerFunction("Shader Material", "ShaderMaterialBoxesScene", make_ShaderMaterialBoxesScene);
  registerFunction("Shader Material", "ShaderMaterialCarvedTreesScene", make_ShaderMaterialCarvedTreesScene);
  registerFunction("Shader Material", "ShaderMaterialCelebrationOfNewYear2020", make_ShaderMaterialCelebrationOfNewYear2020);
  registerFunction("Shader Material", "ShaderMaterialChainsAndGearsScene", make_ShaderMaterialChainsAndGearsScene);
  registerFunction("Shader Material", "ShaderMaterialCloudsScene", make_ShaderMaterialCloudsScene);
  registerFunction("Shader Material", "ShaderMaterialCylindersScene", make_ShaderMaterialCylindersScene);
  registerFunction("Shader Material", "ShaderMaterialDoubleHelixScene", make_ShaderMaterialDoubleHelixScene);
  registerFunction("Shader Material", "ShaderMaterialGeneratorsScene", make_ShaderMaterialGeneratorsScene);
  registerFunction("Shader Material", "ShaderMaterialKifsScene", make_ShaderMaterialKifsScene);
  registerFunction("Shader Material", "ShaderMaterialLuminescenceScene", make_ShaderMaterialLuminescenceScene);
  registerFunction("Shader Material", "ShaderMaterialMengerSpongeScene", make_ShaderMaterialMengerSpongeScene);
  registerFunction("Shader Material", "ShaderMaterialMorningCityScene", make_ShaderMaterialMorningCityScene);
  registerFunction("Shader Material", "ShaderMaterialOperaIslandScene", make_ShaderMaterialOperaIslandScene);
  registerFunction("Shader Material", "ShaderMaterialPbrTestScene", make_ShaderMaterialPbrTestScene);
  registerFunction("Shader Material", "ShaderMaterialPegasusGalaxyScene", make_ShaderMaterialPegasusGalaxyScene);
  registerFunction("Shader Material", "ShaderMaterialPhysicallyBasedSdfScene", make_ShaderMaterialPhysicallyBasedSdfScene);
  registerFunction("Shader Material", "ShaderMaterialPlanetShadertoyScene", make_ShaderMaterialPlanetShadertoyScene);
  registerFunction("Shader Material", "ShaderMaterialScene", make_ShaderMaterialScene);
  registerFunction("Shader Material", "ShaderMaterialSeascapeScene", make_ShaderMaterialSeascapeScene);
  registerFunction("Shader Material", "ShaderMaterialServerRoomScene", make_ShaderMaterialServerRoomScene);
  registerFunction("Shader Material", "ShaderMaterialSimplicityScene", make_ShaderMaterialSimplicityScene);
  registerFunction("Shader Material", "ShaderMaterialSkyboxCloudsScene", make_ShaderMaterialSkyboxCloudsScene);
  registerFunction("Shader Material", "ShaderMaterialSkyboxScene", make_ShaderMaterialSkyboxScene);
  registerFunction("Shader Material", "ShaderMaterialSparseGridMarchingScene", make_ShaderMaterialSparseGridMarchingScene);
  registerFunction("Shader Material", "ShaderMaterialSpeedTracerScene", make_ShaderMaterialSpeedTracerScene);
  registerFunction("Shader Material", "ShaderMaterialStarNestScene", make_ShaderMaterialStarNestScene);
  registerFunction("Shader Material", "ShaderMaterialTheDriveHomeScene", make_ShaderMaterialTheDriveHomeScene);
  registerFunction("Shader Material", "ShaderMaterialTilesScene", make_ShaderMaterialTilesScene);
  registerFunction("Shader Material", "ShaderMaterialVoronoianWaterwayScene", make_ShaderMaterialVoronoianWaterwayScene);
  registerFunction("Shader Material", "ShaderMaterialWarpSpeedScene", make_ShaderMaterialWarpSpeedScene);
  registerFunction("Shader Material", "ShaderMaterialWithFogScene", make_ShaderMaterialWithFogScene);
  registerFunction("Shader Material", "ShaderMaterialWolfenstein3dScene", make_ShaderMaterialWolfenstein3dScene);
  registerFunction("Shader Material", "ShaderMaterialXyptonjtrozScene", make_ShaderMaterialXyptonjtrozScene);
  registerFunction("Materials", "XRayMaterialWithFresnelSkullScene", make_XRayMaterialWithFresnelSkullScene);
  registerFunction("Materials Library", "CellMaterialScene", make_CellMaterialScene);
  registerFunction("Materials Library", "CellShadingMaterialScene", make_CellShadingMaterialScene);
  registerFunction("Materials Library", "FireMaterialScene", make_FireMaterialScene);
  registerFunction("Materials Library", "FloatOnWaterMaterialScene", make_FloatOnWaterMaterialScene);
  registerFunction("Materials Library", "FurMaterialScene", make_FurMaterialScene);
  registerFunction("Materials Library", "GradientMaterialScene", make_GradientMaterialScene);
  registerFunction("Materials Library", "GradientMaterialSphereScene", make_GradientMaterialSphereScene);
  registerFunction("Materials Library", "GridMaterialScene", make_GridMaterialScene);
  registerFunction("Materials Library", "LavaMaterialScene", make_LavaMaterialScene);
  registerFunction("Materials Library", "MixMaterialScene", make_MixMaterialScene);
  registerFunction("Materials Library", "NormalMaterialScene", make_NormalMaterialScene);
  registerFunction("Materials Library", "ShadowOnlyMaterialScene", make_ShadowOnlyMaterialScene);
  registerFunction("Materials Library", "SimpleMaterialScene", make_SimpleMaterialScene);
  registerFunction("Materials Library", "SkyMaterialScene", make_SkyMaterialScene);
  registerFunction("Materials Library", "TerrainMaterialScene", make_TerrainMaterialScene);
  registerFunction("Materials Library", "TriPlanarMaterialScene", make_TriPlanarMaterialScene);
  registerFunction("Materials Library", "WaterMaterialScene", make_WaterMaterialScene);
  registerFunction("Meshes", "AirplaneModelScene", make_AirplaneModelScene);
  registerFunction("Meshes", "BasicElementsScene", make_BasicElementsScene);
  registerFunction("Meshes", "BasicScene", make_BasicScene);
  registerFunction("Meshes", "CircleCurvesFromBeziersScene", make_CircleCurvesFromBeziersScene);
  registerFunction("Meshes", "ColoredCubeFacesScene", make_ColoredCubeFacesScene);
  registerFunction("Meshes", "ColoredRibbonScene", make_ColoredRibbonScene);
  registerFunction("Meshes", "ColoredTriangleScene", make_ColoredTriangleScene);
  registerFunction("Meshes", "ConstructiveSolidGeometriesScene", make_ConstructiveSolidGeometriesScene);
  registerFunction("Meshes", "CubesScene", make_CubesScene);
  registerFunction("Meshes", "CuboidScene", make_CuboidScene);
  registerFunction("Meshes", "CurvedHelixMeshesScene", make_CurvedHelixMeshesScene);
  registerFunction("Meshes", "DecalsScene", make_DecalsScene);
  registerFunction("Meshes", "DisplacementMapCpuScene", make_DisplacementMapCpuScene);
  registerFunction("Meshes", "EdgesRendererScene", make_EdgesRendererScene);
  registerFunction("Meshes", "ExtrudePolygonScene", make_ExtrudePolygonScene);
  registerFunction("Meshes", "ExtrudedPolygonScene", make_ExtrudedPolygonScene);
  registerFunction("Meshes", "ExtrusionScene", make_ExtrusionScene);
  registerFunction("Meshes", "HeightMapScene", make_HeightMapScene);
  registerFunction("Meshes", "HouseFromFloorplanScene", make_HouseFromFloorplanScene);
  registerFunction("Meshes", "IcoSphereScene", make_IcoSphereScene);
  registerFunction("Meshes", "InnerMeshPointsScene", make_InnerMeshPointsScene);
  registerFunction("Meshes", "IsPointInsideMeshScene", make_IsPointInsideMeshScene);
  registerFunction("Meshes", "LatheScene", make_LatheScene);
  registerFunction("Meshes", "LinesMeshSpiralScene", make_LinesMeshSpiralScene);
  registerFunction("Meshes", "LookAtScene", make_LookAtScene);
  registerFunction("Meshes", "LorenzAttractorScene", make_LorenzAttractorScene);
  registerFunction("Meshes", "MandelbrotFractalScene", make_MandelbrotFractalScene);
  registerFunction("Meshes", "MergedMeshesScene", make_MergedMeshesScene);
  registerFunction("Meshes", "MeshNormalsScene", make_MeshNormalsScene);
  registerFunction("Meshes", "PolygonMeshBirdScene", make_PolygonMeshBirdScene);
  registerFunction("Meshes", "PolygonMeshMonkeyScene", make_PolygonMeshMonkeyScene);
  registerFunction("Meshes", "PolygonMeshPuzzlePieceScene", make_PolygonMeshPuzzlePieceScene);
  registerFunction("Meshes", "PolygonMeshStarsScene", make_PolygonMeshStarsScene);
  registerFunction("Meshes", "PolygonMeshStarsWithHolesScene", make_PolygonMeshStarsWithHolesScene);
  registerFunction("Meshes", "PolyhedronScene", make_PolyhedronScene);
  registerFunction("Meshes", "RayHelperScene", make_RayHelperScene);
  registerFunction("Meshes", "RaycastOnHeightMapScene", make_RaycastOnHeightMapScene);
  registerFunction("Meshes", "RibbonScene", make_RibbonScene);
  registerFunction("Meshes", "RotationAndScalingScene", make_RotationAndScalingScene);
  registerFunction("Meshes", "SimpleCarFollowingPathScene", make_SimpleCarFollowingPathScene);
  registerFunction("Meshes", "SuperEllipsoidScene", make_SuperEllipsoidScene);
  registerFunction("Meshes", "TiledGroundScene", make_TiledGroundScene);
  registerFunction("Meshes", "TubeScene", make_TubeScene);
  registerFunction("Optimizations", "BoxInstancesScene", make_BoxInstancesScene);
  registerFunction("Optimizations", "BuildingInstancesGridScene", make_BuildingInstancesGridScene);
  registerFunction("Optimizations", "ClipPlanesScene", make_ClipPlanesScene);
  registerFunction("Optimizations", "CubeChaosScene", make_CubeChaosScene);
  registerFunction("Optimizations", "LevelOfDetailScene", make_LevelOfDetailScene);
  registerFunction("Optimizations", "ManyBoxInstancesScene", make_ManyBoxInstancesScene);
  registerFunction("Particles", "BuildingsSpsScene", make_BuildingsSpsScene);
  registerFunction("Particles", "LightedSpsScene", make_LightedSpsScene);
  registerFunction("Particles", "TrianglesSpsScene", make_TrianglesSpsScene);
  registerFunction("Procedural Textures Library", "BrickProceduralTextureScene", make_BrickProceduralTextureScene);
  registerFunction("Procedural Textures Library", "CloudProceduralTextureScene", make_CloudProceduralTextureScene);
  registerFunction("Procedural Textures Library", "FireProceduralTextureScene", make_FireProceduralTextureScene);
  registerFunction("Procedural Textures Library", "GrassProceduralTextureScene", make_GrassProceduralTextureScene);
  registerFunction("Procedural Textures Library", "MarbleProceduralTextureScene", make_MarbleProceduralTextureScene);
  registerFunction("Procedural Textures Library", "PerlinNoiseProceduralTextureScene", make_PerlinNoiseProceduralTextureScene);
  registerFunction("Procedural Textures Library", "RoadProceduralTextureScene", make_RoadProceduralTextureScene);
  registerFunction("Procedural Textures Library", "StarfieldProceduralTextureScene", make_StarfieldProceduralTextureScene);
  registerFunction("Procedural Textures Library", "WoodProceduralTextureScene", make_WoodProceduralTextureScene);
  registerFunction("Shadows", "BoxShadowScene", make_BoxShadowScene);
  registerFunction("Shadows", "BulbSelfShadowScene", make_BulbSelfShadowScene);
  registerFunction("Shadows", "ShadowsScene", make_ShadowsScene);
  registerFunction("Special FX", "ConvolutionPostProcessScene", make_ConvolutionPostProcessScene);
  registerFunction("Special FX", "DawnBringerScene", make_DawnBringerScene);
  registerFunction("Special FX", "EnvironmentScene", make_EnvironmentScene);
  registerFunction("Special FX", "FadeInOutScene", make_FadeInOutScene);
  registerFunction("Special FX", "FireworksWithShaderCodeScene", make_FireworksWithShaderCodeScene);
  registerFunction("Special FX", "FogScene", make_FogScene);
  registerFunction("Special FX", "FresnelScene", make_FresnelScene);
  registerFunction("Special FX", "GlassWubbleBallScene", make_GlassWubbleBallScene);
  registerFunction("Special FX", "HeatWaveScene", make_HeatWaveScene);
  registerFunction("Special FX", "HighlightLayerScene", make_HighlightLayerScene);
  registerFunction("Special FX", "InfiniteLoaderScene", make_InfiniteLoaderScene);
  registerFunction("Special FX", "KernelBasedBlurScene", make_KernelBasedBlurScene);
  registerFunction("Special FX", "LensFlaresScene", make_LensFlaresScene);
  registerFunction("Special FX", "MotionBlurPostProcessScene", make_MotionBlurPostProcessScene);
  registerFunction("Special FX", "PointsCloudScene", make_PointsCloudScene);
  registerFunction("Special FX", "PortalsScene", make_PortalsScene);
  registerFunction("Special FX", "RealtimeReflectionScene", make_RealtimeReflectionScene);
  registerFunction("Special FX", "RealtimeRefractionScene", make_RealtimeRefractionScene);
  registerFunction("Special FX", "RefractionAndReflectionDdsScene", make_RefractionAndReflectionDdsScene);
  registerFunction("Special FX", "RefractionAndReflectionScene", make_RefractionAndReflectionScene);
  registerFunction("Special FX", "RgbShiftGlitchScene", make_RgbShiftGlitchScene);
  registerFunction("Special FX", "SimplePostProcessRenderPipelineScene", make_SimplePostProcessRenderPipelineScene);
  registerFunction("Special FX", "SpritesScene", make_SpritesScene);
  registerFunction("Special FX", "VolumetricLightScatteringScene", make_VolumetricLightScatteringScene);
  registerFunction("Special FX", "WaveOfSpritesScene", make_WaveOfSpritesScene);
  registerFunction("Special FX", "WavesScene", make_WavesScene);
  registerFunction("Textures", "BlurModeForMirrorsScene", make_BlurModeForMirrorsScene);
  registerFunction("Textures", "BumpTextureScene", make_BumpTextureScene);
  registerFunction("Textures", "BumpTextureSpheresScene", make_BumpTextureSpheresScene);
  registerFunction("Textures", "CubeTextureDifferentFacesScene", make_CubeTextureDifferentFacesScene);
  registerFunction("Textures", "CustomRenderTargetsScene", make_CustomRenderTargetsScene);
  registerFunction("Textures", "CylinderWithTextureScene", make_CylinderWithTextureScene);
  registerFunction("Textures", "EnvironmentTextureScene", make_EnvironmentTextureScene);
  registerFunction("Textures", "EquirectangularMapAsReflectionTextureScene", make_EquirectangularMapAsReflectionTextureScene);
  registerFunction("Textures", "HdrCubeTextureScene", make_HdrCubeTextureScene);
  registerFunction("Textures", "ImageTextureScene", make_ImageTextureScene);
  registerFunction("Textures", "LocalCubemapsScene", make_LocalCubemapsScene);
  registerFunction("Textures", "MirrorTextureScene", make_MirrorTextureScene);
  registerFunction("Textures", "MirrorsScene", make_MirrorsScene);
  registerFunction("Textures", "MultiSampleRenderTargetsScene", make_MultiSampleRenderTargetsScene);
  registerFunction("Textures", "OpacityTextureScene", make_OpacityTextureScene);
  registerFunction("Textures", "PhotoDomeScene", make_PhotoDomeScene);
  registerFunction("Textures", "ProceduralTexturesScene", make_ProceduralTexturesScene);
  registerFunction("Textures", "ReflectingOneFaceSpriteTextureScene", make_ReflectingOneFaceSpriteTextureScene);
  registerFunction("Textures", "RenderTargetTextureScene", make_RenderTargetTextureScene);
  registerFunction("Textures", "SphereTexturesScene", make_SphereTexturesScene);
  registerFunction("Textures", "SphereTransparentTexturesScene", make_SphereTransparentTexturesScene);
  registerFunction("Textures", "SphericalPanningScene", make_SphericalPanningScene);
  registerFunction("Textures", "SphericalReflectionTextureScene", make_SphericalReflectionTextureScene);
  registerFunction("Textures", "TwoSidedTextureScene", make_TwoSidedTextureScene);

}

} // namespace Samples
} // namespace BABYLON

#endif // #ifndef BABYLON_SAMPLES_AUTO_DECL_H"
    