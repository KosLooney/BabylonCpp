#ifndef BABYLON_SHADERS_SHADERS_INCLUDE_LIGHT_FRAGMENT_FX_H
#define BABYLON_SHADERS_SHADERS_INCLUDE_LIGHT_FRAGMENT_FX_H

namespace BABYLON {

extern const char* lightFragment;

const char* lightFragment
  = "#ifdef LIGHT{X}\n"
    "  #if defined(SHADOWONLY) || (defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X}) && defined(LIGHTMAPNOSPECULAR{X}))\n"
    "  //No light calculation\n"
    "  #else\n"
    "  #ifdef PBR\n"
    "  #ifdef SPOTLIGHT{X}\n"
    "  spotInfo = computeSpotLightingInfo(light{X}.vLightData);\n"
    "\n"
    "  #ifdef LIGHT_FALLOFF_GLTF{X}\n"
    "  spotInfo.attenuation = computeDistanceLightFalloff_GLTF(spotInfo.lightDistanceSquared, light{X}.vLightFalloff.y);\n"
    "  spotInfo.attenuation *= computeDirectionalLightFalloff_GLTF(light{X}.vLightDirection.xyz, spotInfo.directionToLightCenterW, light{X}.vLightFalloff.z, light{X}.vLightFalloff.w);\n"
    "  #elif defined(LIGHT_FALLOFF_PHYSICAL{X})\n"
    "  spotInfo.attenuation = computeDistanceLightFalloff_Physical(spotInfo.lightDistanceSquared);\n"
    "  spotInfo.attenuation *= computeDirectionalLightFalloff_Physical(light{X}.vLightDirection.xyz, spotInfo.directionToLightCenterW, light{X}.vLightDirection.w);\n"
    "  #elif defined(LIGHT_FALLOFF_STANDARD{X})\n"
    "  spotInfo.attenuation = computeDistanceLightFalloff_Standard(spotInfo.lightOffset, light{X}.vLightFalloff.x);\n"
    "  spotInfo.attenuation *= computeDirectionalLightFalloff_Standard(light{X}.vLightDirection.xyz, spotInfo.directionToLightCenterW, light{X}.vLightDirection.w, light{X}.vLightData.w);\n"
    "  #else\n"
    "  spotInfo.attenuation = computeDistanceLightFalloff(spotInfo.lightOffset, spotInfo.lightDistanceSquared, light{X}.vLightFalloff.x, light{X}.vLightFalloff.y);\n"
    "  spotInfo.attenuation *= computeDirectionalLightFalloff(light{X}.vLightDirection.xyz, spotInfo.directionToLightCenterW, light{X}.vLightDirection.w, light{X}.vLightData.w, light{X}.vLightFalloff.z, light{X}.vLightFalloff.w);\n"
    "  #endif\n"
    "\n"
    "  info = computeSpotLighting(spotInfo, viewDirectionW, normalW, light{X}.vLightDirection, light{X}.vLightDiffuse.rgb, light{X}.vLightDiffuse.a, roughness, NdotV, specularEnvironmentR0, specularEnvironmentR90, geometricRoughnessFactor, NdotL);\n"
    "  #elif defined(POINTLIGHT{X})\n"
    "  pointInfo = computePointLightingInfo(light{X}.vLightData);\n"
    "\n"
    "  #ifdef LIGHT_FALLOFF_GLTF{X}\n"
    "  pointInfo.attenuation = computeDistanceLightFalloff_GLTF(pointInfo.lightDistanceSquared, light{X}.vLightFalloff.y);\n"
    "  #elif defined(LIGHT_FALLOFF_PHYSICAL{X})\n"
    "  pointInfo.attenuation = computeDistanceLightFalloff_Physical(pointInfo.lightDistanceSquared);\n"
    "  #elif defined(LIGHT_FALLOFF_STANDARD{X})\n"
    "  pointInfo.attenuation = computeDistanceLightFalloff_Standard(pointInfo.lightOffset, light{X}.vLightFalloff.x);\n"
    "  #else\n"
    "  pointInfo.attenuation = computeDistanceLightFalloff(pointInfo.lightOffset, pointInfo.lightDistanceSquared, light{X}.vLightFalloff.x, light{X}.vLightFalloff.y);\n"
    "  #endif\n"
    "  \n"
    "  info = computePointLighting(pointInfo, viewDirectionW, normalW, light{X}.vLightDiffuse.rgb, light{X}.vLightDiffuse.a, roughness, NdotV, specularEnvironmentR0, specularEnvironmentR90, geometricRoughnessFactor, NdotL);\n"
    "  #elif defined(HEMILIGHT{X})\n"
    "  info = computeHemisphericLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular, light{X}.vLightGround, roughness, NdotV, specularEnvironmentR0, specularEnvironmentR90, geometricRoughnessFactor, NdotL);\n"
    "  #elif defined(DIRLIGHT{X})\n"
    "  info = computeDirectionalLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular, light{X}.vLightDiffuse.a, roughness, NdotV, specularEnvironmentR0, specularEnvironmentR90, geometricRoughnessFactor, NdotL);\n"
    "  #endif\n"
    "  #else\n"
    "  #ifdef SPOTLIGHT{X}\n"
    "  info = computeSpotLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDirection, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular, light{X}.vLightDiffuse.a, glossiness);\n"
    "  #elif defined(HEMILIGHT{X})\n"
    "  info = computeHemisphericLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular, light{X}.vLightGround, glossiness);\n"
    "  #elif defined(POINTLIGHT{X}) || defined(DIRLIGHT{X})\n"
    "  info = computeLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular, light{X}.vLightDiffuse.a, glossiness);\n"
    "  #endif\n"
    "  #endif\n"
    "  #ifdef PROJECTEDLIGHTTEXTURE{X}\n"
    "  info.diffuse *= computeProjectionTextureDiffuseLighting(projectionLightSampler{X}, textureProjectionMatrix{X});\n"
    "  #endif\n"
    "  #endif\n"
    "  #ifdef SHADOW{X}\n"
    "  #ifdef SHADOWCLOSEESM{X}\n"
    "  #if defined(SHADOWCUBE{X})\n"
    "  shadow = computeShadowWithCloseESMCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.depthValues);\n"
    "  #else\n"
    "  shadow = computeShadowWithCloseESM(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #elif defined(SHADOWESM{X})\n"
    "  #if defined(SHADOWCUBE{X})\n"
    "  shadow = computeShadowWithESMCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.depthValues);\n"
    "  #else\n"
    "  shadow = computeShadowWithESM(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #elif defined(SHADOWPOISSON{X})\n"
    "  #if defined(SHADOWCUBE{X})\n"
    "  shadow = computeShadowWithPoissonSamplingCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.x, light{X}.depthValues);\n"
    "  #else\n"
    "  shadow = computeShadowWithPoissonSampling(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #elif defined(SHADOWPCF{X})\n"
    "  #if defined(SHADOWLOWQUALITY{X})\n"
    "  shadow = computeShadowWithPCF1(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #elif defined(SHADOWMEDIUMQUALITY{X})\n"
    "  shadow = computeShadowWithPCF3(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #else\n"
    "  shadow = computeShadowWithPCF5(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #elif defined(SHADOWPCSS{X})\n"
    "  #if defined(SHADOWLOWQUALITY{X})\n"
    "  shadow = computeShadowWithPCSS16(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #elif defined(SHADOWMEDIUMQUALITY{X})\n"
    "  shadow = computeShadowWithPCSS32(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #else\n"
    "  shadow = computeShadowWithPCSS64(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #else\n"
    "  #if defined(SHADOWCUBE{X})\n"
    "  shadow = computeShadowCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.depthValues);\n"
    "  #else\n"
    "  shadow = computeShadow(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\n"
    "  #endif\n"
    "  #endif\n"
    "\n"
    "  #ifdef SHADOWONLY\n"
    "  #ifndef SHADOWINUSE\n"
    "  #define SHADOWINUSE\n"
    "  #endif\n"
    "  globalShadow += shadow;\n"
    "  shadowLightCount += 1.0;\n"
    "  #endif\n"
    "  #else\n"
    "  shadow = 1.;\n"
    "  #endif\n"
    "\n"
    "  #ifndef SHADOWONLY\n"
    "  #ifdef CUSTOMUSERLIGHTING\n"
    "  diffuseBase += computeCustomDiffuseLighting(info, diffuseBase, shadow);\n"
    "  #ifdef SPECULARTERM\n"
    "  specularBase += computeCustomSpecularLighting(info, specularBase, shadow);\n"
    "  #endif\n"
    "  #elif defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X})\n"
    "  diffuseBase += lightmapColor * shadow;\n"
    "  #ifdef SPECULARTERM\n"
    "  #ifndef LIGHTMAPNOSPECULAR{X}\n"
    "  specularBase += info.specular * shadow * lightmapColor;\n"
    "  #endif\n"
    "  #endif\n"
    "  #else\n"
    "  diffuseBase += info.diffuse * shadow;\n"
    "  #ifdef SPECULARTERM\n"
    "  specularBase += info.specular * shadow;\n"
    "  #endif\n"
    "  #endif\n"
    "  #endif\n"
    "#endif\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_SHADERS_INCLUDE_LIGHT_FRAGMENT_FX_H
