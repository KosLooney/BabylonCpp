#ifndef BABYLON_SHADERS_SHADERS_INCLUDE_PBR_DIRECT_LIGHTING_SETUP_FUNCTIONS_FX_H
#define BABYLON_SHADERS_SHADERS_INCLUDE_PBR_DIRECT_LIGHTING_SETUP_FUNCTIONS_FX_H

namespace BABYLON {

extern const char* pbrDirectLightingSetupFunctions;

const char* pbrDirectLightingSetupFunctions
  = "// Pre Light Computing\n"
    "struct preLightingInfo\n"
    "{\n"
    "  // Pre Falloff Info\n"
    "  vec3 lightOffset;\n"
    "  float lightDistanceSquared;\n"
    "  float lightDistance;\n"
    "\n"
    "  // Falloff Info\n"
    "  float attenuation;\n"
    "\n"
    "  // Lighting Info\n"
    "  vec3 L;\n"
    "  vec3 H;\n"
    "  float NdotV;\n"
    "  float NdotLUnclamped;\n"
    "  float NdotL;\n"
    "  float VdotH;\n"
    "  float roughness;\n"
    "};\n"
    "\n"
    "preLightingInfo computePointAndSpotPreLightingInfo(vec4 lightData, vec3 V, vec3 N) {\n"
    "  preLightingInfo result;\n"
    "\n"
    "  // Attenuation data.\n"
    "  result.lightOffset = lightData.xyz - vPositionW;\n"
    "  result.lightDistanceSquared = dot(result.lightOffset, result.lightOffset);\n"
    "\n"
    "  // Roughness.\n"
    "  result.lightDistance = sqrt(result.lightDistanceSquared);\n"
    "\n"
    "  // Geometry Data.\n"
    "  result.L = normalize(result.lightOffset);\n"
    "  result.H = normalize(V + result.L);\n"
    "  result.VdotH = saturate(dot(V, result.H));\n"
    "\n"
    "  result.NdotLUnclamped = dot(N, result.L);\n"
    "  result.NdotL = saturateEps(result.NdotLUnclamped);\n"
    "\n"
    "  return result;\n"
    "}\n"
    "\n"
    "preLightingInfo computeDirectionalPreLightingInfo(vec4 lightData, vec3 V, vec3 N) {\n"
    "  preLightingInfo result;\n"
    "\n"
    "  // Roughness\n"
    "  result.lightDistance = length(-lightData.xyz);\n"
    "\n"
    "  // Geometry Data.\n"
    "  result.L = normalize(-lightData.xyz);\n"
    "  result.H = normalize(V + result.L);\n"
    "  result.VdotH = saturate(dot(V, result.H));\n"
    "\n"
    "  result.NdotLUnclamped = dot(N, result.L);\n"
    "  result.NdotL = saturateEps(result.NdotLUnclamped);\n"
    "\n"
    "  return result;\n"
    "}\n"
    "\n"
    "preLightingInfo computeHemisphericPreLightingInfo(vec4 lightData, vec3 V, vec3 N) {\n"
    "  preLightingInfo result;\n"
    "\n"
    "  // Geometry Data.\n"
    "  // Half Lambert for Hemispherix lighting.\n"
    "  result.NdotL = dot(N, lightData.xyz) * 0.5 + 0.5;\n"
    "  result.NdotL = saturateEps(result.NdotL);\n"
    "  result.NdotLUnclamped = result.NdotL;\n"
    "\n"
    "  #ifdef SPECULARTERM\n"
    "  result.L = normalize(lightData.xyz);\n"
    "  result.H = normalize(V + result.L);\n"
    "  result.VdotH = saturate(dot(V, result.H));\n"
    "  #endif\n"
    "\n"
    "  return result;\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_SHADERS_INCLUDE_PBR_DIRECT_LIGHTING_SETUP_FUNCTIONS_FX_H
