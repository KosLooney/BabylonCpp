#ifndef BABYLON_SHADERS_SHADOW_MAP_VERTEX_FX_H
#define BABYLON_SHADERS_SHADOW_MAP_VERTEX_FX_H

namespace BABYLON {

extern const char* shadowMapVertexShader;

const char* shadowMapVertexShader
  = "// Attribute\n"
    "attribute vec3 position;\n"
    "\n"
    "#ifdef NORMAL\n"
    "  attribute vec3 normal;\n"
    "  uniform vec3 lightData;\n"
    "#endif\n"
    "\n"
    "#include<bonesDeclaration>\n"
    "\n"
    "#include<morphTargetsVertexGlobalDeclaration>\n"
    "#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n"
    "\n"
    "// Uniforms\n"
    "#include<instancesDeclaration>\n"
    "#include<helperFunctions>\n"
    "\n"
    "uniform mat4 viewProjection;\n"
    "uniform vec3 biasAndScale;\n"
    "uniform vec2 depthValues;\n"
    "\n"
    "varying float vDepthMetric;\n"
    "\n"
    "#ifdef ALPHATEST\n"
    "varying vec2 vUV;\n"
    "uniform mat4 diffuseMatrix;\n"
    "#ifdef UV1\n"
    "attribute vec2 uv;\n"
    "#endif\n"
    "#ifdef UV2\n"
    "attribute vec2 uv2;\n"
    "#endif\n"
    "#endif\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "vec3 positionUpdated = position;\n"
    "\n"
    "#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n"
    "\n"
    "#include<instancesVertex>\n"
    "#include<bonesVertex>\n"
    "\n"
    "vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\n"
    "\n"
    "// Normal inset Bias.\n"
    "#ifdef NORMAL\n"
    "  mat3 normalWorld = mat3(finalWorld);\n"
    "\n"
    "  #ifdef NONUNIFORMSCALING\n"
    "  normalWorld = transposeMat3(inverseMat3(normalWorld));\n"
    "  #endif\n"
    "\n"
    "  vec3 worldNor = normalize(normalWorld * normal);\n"
    "\n"
    "  #ifdef DIRECTIONINLIGHTDATA\n"
    "  vec3 worldLightDir = normalize(-lightData.xyz);\n"
    "  #else\n"
    "  vec3 directionToLight = lightData.xyz - worldPos.xyz;\n"
    "  vec3 worldLightDir = normalize(directionToLight);\n"
    "  #endif\n"
    "\n"
    "  float ndl = dot(worldNor, worldLightDir);\n"
    "  float sinNL = sqrt(1.0 - ndl * ndl);\n"
    "  float normalBias = biasAndScale.y * sinNL;\n"
    "\n"
    "  worldPos.xyz -= worldNor * normalBias;\n"
    "#endif\n"
    "\n"
    "// Projection.\n"
    "gl_Position = viewProjection * worldPos;\n"
    "\n"
    "#ifdef DEPTHTEXTURE\n"
    "  // Depth texture Linear bias.\n"
    "  gl_Position.z += biasAndScale.x * gl_Position.w;\n"
    "#endif\n"
    "\n"
    "  // Color Texture Linear bias.\n"
    "  vDepthMetric = ((gl_Position.z + depthValues.x) / (depthValues.y)) + biasAndScale.x;\n"
    "\n"
    "#ifdef ALPHATEST\n"
    "  #ifdef UV1\n"
    "  vUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\n"
    "  #endif\n"
    "  #ifdef UV2\n"
    "  vUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\n"
    "  #endif\n"
    "#endif\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_SHADOW_MAP_VERTEX_FX_H
