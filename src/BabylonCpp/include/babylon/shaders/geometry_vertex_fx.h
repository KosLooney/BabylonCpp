#ifndef BABYLON_SHADERS_GEOMETRY_VERTEX_FX_H
#define BABYLON_SHADERS_GEOMETRY_VERTEX_FX_H

namespace BABYLON {

extern const char* geometryVertexShader;

const char* geometryVertexShader
  = "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif\n"
    "precision highp int;\n"
    "\n"
    "#include<bonesDeclaration>\n"
    "#include<instancesDeclaration>\n"
    "\n"
    "attribute vec3 position;\n"
    "attribute vec3 normal;\n"
    "\n"
    "#if defined(ALPHATEST) || defined(NEED_UV)\n"
    "varying vec2 vUV;\n"
    "uniform mat4 diffuseMatrix;\n"
    "#ifdef UV1\n"
    "attribute vec2 uv;\n"
    "#endif\n"
    "#ifdef UV2\n"
    "attribute vec2 uv2;\n"
    "#endif\n"
    "#endif\n"
    "\n"
    "// Uniform\n"
    "uniform mat4 viewProjection;\n"
    "uniform mat4 view;\n"
    "\n"
    "varying vec3 vNormalV;\n"
    "varying vec4 vViewPos;\n"
    "\n"
    "#ifdef POSITION\n"
    "varying vec3 vPosition;\n"
    "#endif\n"
    "\n"
    "#ifdef VELOCITY\n"
    "uniform mat4 previousWorld;\n"
    "uniform mat4 previousViewProjection;\n"
    "#ifdef BONES_VELOCITY_ENABLED\n"
    "#if NUM_BONE_INFLUENCERS > 0\n"
    "uniform mat4 mPreviousBones[BonesPerMesh];\n"
    "#endif\n"
    "#endif\n"
    "\n"
    "varying vec4 vCurrentPosition;\n"
    "varying vec4 vPreviousPosition;\n"
    "#endif\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "#include<instancesVertex>\n"
    "\n"
    "  #if defined(VELOCITY) && !defined(BONES_VELOCITY_ENABLED)\n"
    "  // Compute velocity before bones computation\n"
    "  vCurrentPosition = viewProjection * finalWorld * vec4(position, 1.0);  \n"
    "  vPreviousPosition = previousViewProjection * previousWorld * vec4(position, 1.0);\n"
    "  #endif\n"
    "\n"
    "#include<bonesVertex>\n"
    "  vec4 pos = vec4(finalWorld * vec4(position, 1.0));\n"
    "\n"
    "  vNormalV = normalize(vec3((view * finalWorld) * vec4(normal, 0.0)));\n"
    "  vViewPos = view * pos;\n"
    "\n"
    "  #if defined(VELOCITY) && defined(BONES_VELOCITY_ENABLED)\n"
    "  vCurrentPosition = viewProjection * finalWorld * vec4(position, 1.0);\n"
    "\n"
    "  #if NUM_BONE_INFLUENCERS > 0\n"
    "  mat4 previousInfluence;\n"
    "  previousInfluence = mPreviousBones[int(matricesIndices[0])] * matricesWeights[0];\n"
    "  #if NUM_BONE_INFLUENCERS > 1\n"
    "  previousInfluence += mPreviousBones[int(matricesIndices[1])] * matricesWeights[1];\n"
    "  #endif  \n"
    "  #if NUM_BONE_INFLUENCERS > 2\n"
    "  previousInfluence += mPreviousBones[int(matricesIndices[2])] * matricesWeights[2];\n"
    "  #endif  \n"
    "  #if NUM_BONE_INFLUENCERS > 3\n"
    "  previousInfluence += mPreviousBones[int(matricesIndices[3])] * matricesWeights[3];\n"
    "  #endif  \n"
    "\n"
    "  #if NUM_BONE_INFLUENCERS > 4\n"
    "  previousInfluence += mPreviousBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\n"
    "  #endif  \n"
    "  #if NUM_BONE_INFLUENCERS > 5\n"
    "  previousInfluence += mPreviousBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\n"
    "  #endif  \n"
    "  #if NUM_BONE_INFLUENCERS > 6\n"
    "  previousInfluence += mPreviousBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\n"
    "  #endif  \n"
    "  #if NUM_BONE_INFLUENCERS > 7\n"
    "  previousInfluence += mPreviousBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\n"
    "  #endif\n"
    "\n"
    "  vPreviousPosition = previousViewProjection * previousWorld * previousInfluence * vec4(position, 1.0);\n"
    "  #else\n"
    "  vPreviousPosition = previousViewProjection * previousWorld * vec4(position, 1.0);\n"
    "  #endif\n"
    "  #endif\n"
    "\n"
    "  #ifdef POSITION\n"
    "  vPosition = pos.xyz / pos.w;\n"
    "  #endif\n"
    "\n"
    "  gl_Position = viewProjection * finalWorld * vec4(position, 1.0);\n"
    "\n"
    "#if defined(ALPHATEST) || defined(BASIC_RENDER)\n"
    "#ifdef UV1\n"
    "  vUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\n"
    "#endif\n"
    "#ifdef UV2\n"
    "  vUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\n"
    "#endif\n"
    "#endif\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_GEOMETRY_VERTEX_FX_H
