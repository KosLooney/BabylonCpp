#ifndef BABYLON_SHADERS_BACKGROUND_VERTEX_FX_H
#define BABYLON_SHADERS_BACKGROUND_VERTEX_FX_H

namespace BABYLON {

extern const char* backgroundVertexShader;

const char* backgroundVertexShader
  = "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif\n"
    "\n"
    "#include<__decl__backgroundVertex>\n"
    "\n"
    "#include<helperFunctions>\n"
    "\n"
    "// Attributes\n"
    "attribute vec3 position;\n"
    "#ifdef NORMAL\n"
    "attribute vec3 normal;\n"
    "#endif\n"
    "\n"
    "#include<bonesDeclaration>\n"
    "\n"
    "// Uniforms\n"
    "#include<instancesDeclaration>\n"
    "\n"
    "#ifdef POINTSIZE\n"
    "uniform float pointSize;\n"
    "#endif\n"
    "\n"
    "// Output\n"
    "varying vec3 vPositionW;\n"
    "#ifdef NORMAL\n"
    "varying vec3 vNormalW;\n"
    "#endif\n"
    "#ifdef UV1\n"
    "attribute vec2 uv;\n"
    "#endif\n"
    "#ifdef UV2\n"
    "attribute vec2 uv2;\n"
    "#endif\n"
    "#ifdef MAINUV1\n"
    "varying vec2 vMainUV1;\n"
    "#endif\n"
    "#ifdef MAINUV2\n"
    "varying vec2 vMainUV2; \n"
    "#endif\n"
    "\n"
    "#if defined(DIFFUSE) && DIFFUSEDIRECTUV == 0\n"
    "varying vec2 vDiffuseUV;\n"
    "#endif\n"
    "\n"
    "#include<clipPlaneVertexDeclaration>\n"
    "\n"
    "#include<fogVertexDeclaration>\n"
    "#include<__decl__lightFragment>[0..maxSimultaneousLights]\n"
    "\n"
    "#ifdef REFLECTIONMAP_SKYBOX\n"
    "varying vec3 vPositionUVW;\n"
    "#endif\n"
    "\n"
    "#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\n"
    "varying vec3 vDirectionW;\n"
    "#endif\n"
    "\n"
    "void main(void) {\n"
    "\n"
    "#ifdef REFLECTIONMAP_SKYBOX\n"
    "  vPositionUVW = position;\n"
    "#endif \n"
    "\n"
    "#include<instancesVertex>\n"
    "#include<bonesVertex>\n"
    "\n"
    "  gl_Position = viewProjection * finalWorld * vec4(position, 1.0);\n"
    "\n"
    "  vec4 worldPos = finalWorld * vec4(position, 1.0);\n"
    "  vPositionW = vec3(worldPos);\n"
    "\n"
    "#ifdef NORMAL\n"
    "  mat3 normalWorld = mat3(finalWorld);\n"
    "\n"
    "  #ifdef NONUNIFORMSCALING\n"
    "  normalWorld = transposeMat3(inverseMat3(normalWorld));\n"
    "  #endif\n"
    "\n"
    "  vNormalW = normalize(normalWorld * normal);\n"
    "#endif\n"
    "\n"
    "#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\n"
    "  vDirectionW = normalize(vec3(finalWorld * vec4(position, 0.0)));\n"
    "\n"
    "\n"
    "  #ifdef EQUIRECTANGULAR_RELFECTION_FOV\n"
    "  mat3 screenToWorld = inverseMat3(mat3(finalWorld * viewProjection));\n"
    "  vec3 segment = mix(vDirectionW, screenToWorld * vec3(0.0,0.0, 1.0), abs(fFovMultiplier - 1.0));\n"
    "  if (fFovMultiplier <= 1.0) {\n"
    "  vDirectionW = normalize(segment);\n"
    "  } else {\n"
    "  vDirectionW = normalize(vDirectionW + (vDirectionW - segment));\n"
    "  }\n"
    "  #endif\n"
    "#endif\n"
    "\n"
    "#ifndef UV1\n"
    "  vec2 uv = vec2(0., 0.);\n"
    "#endif\n"
    "#ifndef UV2\n"
    "  vec2 uv2 = vec2(0., 0.);\n"
    "#endif\n"
    "\n"
    "#ifdef MAINUV1\n"
    "  vMainUV1 = uv;\n"
    "#endif \n"
    "\n"
    "#ifdef MAINUV2\n"
    "  vMainUV2 = uv2;\n"
    "#endif\n"
    "\n"
    "#if defined(DIFFUSE) && DIFFUSEDIRECTUV == 0 \n"
    "  if (vDiffuseInfos.x == 0.)\n"
    "  {\n"
    "  vDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\n"
    "  }\n"
    "  else\n"
    "  {\n"
    "  vDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\n"
    "  }\n"
    "#endif\n"
    "\n"
    "  // Clip plane\n"
    "#include<clipPlaneVertex>\n"
    "\n"
    "  // Fog\n"
    "#include<fogVertex>\n"
    "\n"
    "  // Shadows\n"
    "#include<shadowsVertex>[0..maxSimultaneousLights]\n"
    "\n"
    "  // Vertex color\n"
    "#ifdef VERTEXCOLOR\n"
    "  vColor = color;\n"
    "#endif\n"
    "\n"
    "  // Point size\n"
    "#ifdef POINTSIZE\n"
    "  gl_PointSize = pointSize;\n"
    "#endif\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_BACKGROUND_VERTEX_FX_H
