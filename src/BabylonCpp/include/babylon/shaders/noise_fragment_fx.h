#ifndef BABYLON_SHADERS_NOISE_FRAGMENT_FX_H
#define BABYLON_SHADERS_NOISE_FRAGMENT_FX_H

namespace BABYLON {

extern const char* noisePixelShader;

const char* noisePixelShader
  = "// Source: https://www.shadertoy.com/view/4lB3zz\n"
    "\n"
    "// Uniforms\n"
    "uniform float brightness;\n"
    "uniform int octaves;\n"
    "uniform float persistence;\n"
    "uniform float timeScale;\n"
    "\n"
    "// Varyings\n"
    "varying vec2 vUV;\n"
    "\n"
    "// Functions\n"
    "vec2 hash22(vec2 p)\n"
    "{\n"
    "  p = p * mat2(127.1, 311.7, 269.5, 183.3);\n"
    "  p = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n"
    "  return sin(p * 6.283 + timeScale);\n"
    "}\n"
    "\n"
    "float interpolationNoise(vec2 p)\n"
    "{\n"
    "  vec2 pi = floor(p);\n"
    "  vec2 pf = p-pi;\n"
    "  \n"
    "  vec2 w = pf * pf * (3.-2. * pf);\n"
    "  \n"
    "  float f00 = dot(hash22(pi + vec2(.0,.0)), pf-vec2(.0,.0));\n"
    "  float f01 = dot(hash22(pi + vec2(.0,1.)), pf-vec2(.0,1.));\n"
    "  float f10 = dot(hash22(pi + vec2(1.0,0.)), pf-vec2(1.0,0.));\n"
    "  float f11 = dot(hash22(pi + vec2(1.0,1.)), pf-vec2(1.0,1.));\n"
    "   \n"
    "  float xm1 = mix(f00,f10,w.x);\n"
    "  float xm2 = mix(f01,f11,w.x);\n"
    "  \n"
    "  float ym = mix(xm1,xm2,w.y); \n"
    "  return ym;\n"
    "   \n"
    "}\n"
    "\n"
    "float perlinNoise2D(float x,float y)\n"
    "{\n"
    "  float sum = 0.0;\n"
    "  float frequency = 0.0;\n"
    "  float amplitude = 0.0;\n"
    "  for(int i = 0; i < octaves; i++)\n"
    "  {\n"
    "  frequency = pow(2.0, float(i));\n"
    "  amplitude = pow(persistence, float(i));\n"
    "  sum = sum + interpolationNoise(vec2(x * frequency, y * frequency)) * amplitude;\n"
    "  }\n"
    "  \n"
    "  return sum;\n"
    "}\n"
    "\n"
    "// Main\n"
    "void main(void)\n"
    "{\n"
    "  float x = abs(vUV.x);\n"
    "  float y = abs(vUV.y);\n"
    "\n"
    "  float noise = brightness + (1.0 - brightness) * perlinNoise2D(x,y);\n"
    "\n"
    "  gl_FragColor = vec4(noise, noise, noise, 1.0);\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_NOISE_FRAGMENT_FX_H
