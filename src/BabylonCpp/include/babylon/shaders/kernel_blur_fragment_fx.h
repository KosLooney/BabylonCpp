#ifndef BABYLON_SHADERS_KERNEL_BLUR_FRAGMENT_FX_H
#define BABYLON_SHADERS_KERNEL_BLUR_FRAGMENT_FX_H

namespace BABYLON {

extern const char* kernelBlurPixelShader;

const char* kernelBlurPixelShader
  = "// Parameters\n"
    "uniform sampler2D textureSampler;\n"
    "uniform vec2 delta;\n"
    "\n"
    "// Varying\n"
    "varying vec2 sampleCenter;\n"
    "\n"
    "#ifdef DOF\n"
    "  uniform sampler2D circleOfConfusionSampler;\n"
    "\n"
    "  uniform vec2 cameraMinMaxZ;\n"
    "\n"
    "  float sampleDistance(const in vec2 offset) {\n"
    "  float depth = texture2D(circleOfConfusionSampler, offset).g; // depth value from DepthRenderer: 0 to 1 \n"
    "  return cameraMinMaxZ.x + (cameraMinMaxZ.y - cameraMinMaxZ.x)*depth; // actual distance from the lens \n"
    "  }\n"
    "  float sampleCoC(const in vec2 offset) {\n"
    "  float coc = texture2D(circleOfConfusionSampler, offset).r; \n"
    "  return coc; // actual distance from the lens \n"
    "  }\n"
    "#endif\n"
    "\n"
    "#include<kernelBlurVaryingDeclaration>[0..varyingCount]\n"
    "\n"
    "#ifdef PACKEDFLOAT\n"
    "  vec4 pack(float depth)\n"
    "  {\n"
    "  const vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\n"
    "  const vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n"
    "\n"
    "  vec4 res = fract(depth * bit_shift);\n"
    "  res -= res.xxyz * bit_mask;\n"
    "\n"
    "  return res;\n"
    "  }\n"
    "\n"
    "  float unpack(vec4 color)\n"
    "  {\n"
    "  const vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\n"
    "  return dot(color, bit_shift);\n"
    "  }\n"
    "#endif\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  float computedWeight = 0.0;\n"
    "\n"
    "  #ifdef PACKEDFLOAT  \n"
    "  float blend = 0.;\n"
    "  #else\n"
    "  vec4 blend = vec4(0.);\n"
    "  #endif\n"
    "\n"
    "  #ifdef DOF\n"
    "  float sumOfWeights = CENTER_WEIGHT; // Since not all values are blended, keep track of sum to devide result by at the end to get an average (start at center weight as center pixel is added by default)\n"
    "  float factor = 0.0;\n"
    "\n"
    "  // Add center pixel to the blur by default\n"
    "  #ifdef PACKEDFLOAT\n"
    "  blend += unpack(texture2D(textureSampler, sampleCenter)) * CENTER_WEIGHT;\n"
    "  #else\n"
    "  blend += texture2D(textureSampler, sampleCenter) * CENTER_WEIGHT;\n"
    "  #endif\n"
    "  #endif\n"
    "\n"
    "  #include<kernelBlurFragment>[0..varyingCount]\n"
    "  #include<kernelBlurFragment2>[0..depCount]\n"
    "\n"
    "  #ifdef PACKEDFLOAT\n"
    "  gl_FragColor = pack(blend);\n"
    "  #else\n"
    "  gl_FragColor = blend;\n"
    "  #endif\n"
    "\n"
    "  #ifdef DOF\n"
    "  gl_FragColor /= sumOfWeights;\n"
    "  #endif\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_KERNEL_BLUR_FRAGMENT_FX_H
