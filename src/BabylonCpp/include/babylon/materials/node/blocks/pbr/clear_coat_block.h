#ifndef BABYLON_MATERIALS_NODE_BLOCKS_PBR_CLEAR_COAT_BLOCK_H
#define BABYLON_MATERIALS_NODE_BLOCKS_PBR_CLEAR_COAT_BLOCK_H

#include <babylon/babylon_api.h>
#include <babylon/materials/node/node_material_block.h>

namespace BABYLON {

class ClearCoatBlock;
class ReflectionBlock;
using ClearCoatBlockPtr  = std::shared_ptr<ClearCoatBlock>;
using ReflectionBlockPtr = std::shared_ptr<ReflectionBlock>;

/**
 * @brief Block used to implement the clear coat module of the PBR material.
 */
class BABYLON_SHARED_EXPORT ClearCoatBlock : public NodeMaterialBlock {

public:
  template <typename... Ts>
  static ClearCoatBlockPtr New(Ts&&... args)
  {
    auto clearCoatBlock
      = std::shared_ptr<ClearCoatBlock>(new ClearCoatBlock(std::forward<Ts>(args)...));
    ClearCoatBlock::RegisterConnections(clearCoatBlock);

    return clearCoatBlock;
  }
  ~ClearCoatBlock() override;

  /**
   * @brief Hidden
   */
  static void RegisterConnections(const ClearCoatBlockPtr& clearCoatBlock);

  /**
   * @brief Initialize the block and prepare the context for build.
   * @param state defines the state that will be used for the build
   */
  void initialize(NodeMaterialBuildState& state) override;

  /**
   * @brief Gets the current class name.
   * @returns the class name
   */
  std::string getClassName() const override;

  /**
   * @brief Lets the block try to connect some inputs automatically.
   * @param material defines the hosting NodeMaterial
   */
  void autoConfigure(const NodeMaterialPtr& material) override;

  /**
   * @brief Update defines for shader compilation.
   * @param mesh defines the mesh to be rendered
   * @param nodeMaterial defines the node material requesting the update
   * @param defines defines the material defines to update
   * @param useInstances specifies that instances should be used
   */
  void prepareDefines(AbstractMesh* mesh, const NodeMaterialPtr& nodeMaterial,
                      NodeMaterialDefines& defines, bool useInstances = false,
                      SubMesh* subMesh = nullptr) override;

  /**
   * @brief Bind data to effect. Will only be called for blocks with isBindable === true.
   * @param effect defines the effect to bind data to
   * @param nodeMaterial defines the hosting NodeMaterial
   * @param mesh defines the mesh that will be rendered
   */
  void bind(Effect* effect, const NodeMaterialPtr& nodeMaterial, Mesh* mesh = nullptr,
            SubMesh* subMesh = nullptr) override;

  /**
   * Gets the main code of the block (fragment side)
   * @param state current state of the node material building
   * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an
   * active clear coat module
   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without
   * an active reflection module
   * @param worldPosVarName name of the variable holding the world position
   * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is
   * generated
   * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already
   * been generated by another block (PerturbNormal or Anisotropy)
   * @param worldNormalVarName name of the variable holding the world normal
   * @returns the shader code
   */
  static std::string GetCode(NodeMaterialBuildState& state, const ClearCoatBlockPtr& ccBlock,
                             const ReflectionBlockPtr& reflectionBlock,
                             const std::string& worldPosVarName, bool generateTBNSpace,
                             bool vTBNAvailable, const std::string& worldNormalVarName);

protected:
  /**
   * @brief Creates a new ClearCoatBlock.
   * @param name defines the block name
   */
  ClearCoatBlock(const std::string& name);

  /**
   * @brief Gets the intensity input component.
   */
  NodeMaterialConnectionPointPtr& get_intensity();

  /**
   * @brief Gets the roughness input component.
   */
  NodeMaterialConnectionPointPtr& get_roughness();

  /**
   * @brief Gets the ior input component.
   */
  NodeMaterialConnectionPointPtr& get_ior();

  /**
   * @brief Gets the texture input component.
   */
  NodeMaterialConnectionPointPtr& get_texture();

  /**
   * @brief Gets the bump texture input component.
   */
  NodeMaterialConnectionPointPtr& get_bumpTexture();

  /**
   * @brief Gets the uv input component.
   */
  NodeMaterialConnectionPointPtr& get_uv();

  /**
   * @brief Gets the tint color input component.
   */
  NodeMaterialConnectionPointPtr& get_tintColor();

  /**
   * @brief Gets the tint "at distance" input component.
   */
  NodeMaterialConnectionPointPtr& get_tintAtDistance();

  /**
   * @brief Gets the tint thickness input component.
   */
  NodeMaterialConnectionPointPtr& get_tintThickness();

  /**
   * @brief Gets the world tangent input component.
   */
  NodeMaterialConnectionPointPtr& get_worldTangent();

  /**
   * @brief Gets the clear coat object output component.
   */
  NodeMaterialConnectionPointPtr& get_clearcoat();

  /**
   * @brief Hidden
   */
  ClearCoatBlock& _buildBlock(NodeMaterialBuildState& state) override;

private:
  std::string _generateTBNSpace(NodeMaterialBuildState& state,
                                const std::string& worldPositionVarName,
                                const std::string& worldNormalVarName);

public:
  /**
   * Gets the intensity input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> intensity;

  /**
   * Gets the roughness input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> roughness;

  /**
   * Gets the ior input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> ior;

  /**
   * Gets the texture input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> texture;

  /**
   * Gets the bump texture input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> bumpTexture;

  /**
   * Gets the uv input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> uv;

  /**
   * Gets the tint color input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> tintColor;

  /**
   * Gets the tint "at distance" input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> tintAtDistance;

  /**
   * Gets the tint thickness input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> tintThickness;

  /**
   * Gets the world tangent input component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> worldTangent;

  /**
   * Gets the clear coat object output component
   */
  ReadOnlyProperty<ClearCoatBlock, NodeMaterialConnectionPointPtr> clearcoat;

private:
  Scene* _scene;

}; // end of class ClearCoatBlock

} // end of namespace BABYLON

#endif // end of BABYLON_MATERIALS_NODE_BLOCKS_PBR_CLEAR_COAT_BLOCK_H
