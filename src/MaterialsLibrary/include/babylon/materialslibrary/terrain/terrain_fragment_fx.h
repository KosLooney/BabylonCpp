#ifndef BABYLON_MATERIALS_LIBRARY_TERRAIN_TERRAIN_FRAGMENT_FX_H
#define BABYLON_MATERIALS_LIBRARY_TERRAIN_TERRAIN_FRAGMENT_FX_H

namespace BABYLON {

extern const char* terrainPixelShader;

const char* terrainPixelShader
  = "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif\n"
    "\n"
    "// Constants\n"
    "uniform vec3 vEyePosition;\n"
    "uniform vec4 vDiffuseColor;\n"
    "\n"
    "#ifdef SPECULARTERM\n"
    "uniform vec4 vSpecularColor;\n"
    "#endif\n"
    "\n"
    "// Input\n"
    "varying vec3 vPositionW;\n"
    "\n"
    "#ifdef NORMAL\n"
    "varying vec3 vNormalW;\n"
    "#endif\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "varying vec4 vColor;\n"
    "#endif\n"
    "\n"
    "// Helper functions\n"
    "#include<helperFunctions>\n"
    "\n"
    "// Lights\n"
    "#include<__decl__lightFragment>[0..maxSimultaneousLights]\n"
    "\n"
    "// Samplers\n"
    "#ifdef DIFFUSE\n"
    "varying vec2 vTextureUV;\n"
    "uniform sampler2D textureSampler;\n"
    "uniform vec2 vTextureInfos;\n"
    "\n"
    "uniform sampler2D diffuse1Sampler;\n"
    "uniform sampler2D diffuse2Sampler;\n"
    "uniform sampler2D diffuse3Sampler;\n"
    "\n"
    "uniform vec2 diffuse1Infos;\n"
    "uniform vec2 diffuse2Infos;\n"
    "uniform vec2 diffuse3Infos;\n"
    "\n"
    "#endif\n"
    "\n"
    "#ifdef BUMP\n"
    "uniform sampler2D bump1Sampler;\n"
    "uniform sampler2D bump2Sampler;\n"
    "uniform sampler2D bump3Sampler;\n"
    "#endif\n"
    "\n"
    "// Shadows\n"
    "#include<lightsFragmentFunctions>\n"
    "#include<shadowsFragmentFunctions>\n"
    "#include<clipPlaneFragmentDeclaration>\n"
    "\n"
    "// Fog\n"
    "#include<fogFragmentDeclaration>\n"
    "\n"
    "// Bump\n"
    "#ifdef BUMP\n"
    "#extension GL_OES_standard_derivatives : enable\n"
    "// Thanks to http://www.thetenthplanet.de/archives/1180\n"
    "mat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\n"
    "{\n"
    "  // get edge vectors of the pixel triangle\n"
    "  vec3 dp1 = dFdx(p);\n"
    "  vec3 dp2 = dFdy(p);\n"
    "  vec2 duv1 = dFdx(uv);\n"
    "  vec2 duv2 = dFdy(uv);\n"
    "\n"
    "  // solve the linear system\n"
    "  vec3 dp2perp = cross(dp2, normal);\n"
    "  vec3 dp1perp = cross(normal, dp1);\n"
    "  vec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\n"
    "  vec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\n"
    "\n"
    "  // construct a scale-invariant frame \n"
    "  float invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\n"
    "  return mat3(tangent * invmax, binormal * invmax, normal);\n"
    "}\n"
    "\n"
    "vec3 perturbNormal(vec3 viewDir, vec3 mixColor)\n"
    "{  \n"
    "  vec3 bump1Color = texture2D(bump1Sampler, vTextureUV * diffuse1Infos).xyz;\n"
    "  vec3 bump2Color = texture2D(bump2Sampler, vTextureUV * diffuse2Infos).xyz;\n"
    "  vec3 bump3Color = texture2D(bump3Sampler, vTextureUV * diffuse3Infos).xyz;\n"
    "  \n"
    "  bump1Color.rgb *= mixColor.r;\n"
    "   bump2Color.rgb = mix(bump1Color.rgb, bump2Color.rgb, mixColor.g);\n"
    "   vec3 map = mix(bump2Color.rgb, bump3Color.rgb, mixColor.b);\n"
    "  \n"
    "  map = map * 255. / 127. - 128. / 127.;\n"
    "  mat3 TBN = cotangent_frame(vNormalW * vTextureInfos.y, -viewDir, vTextureUV);\n"
    "  return normalize(TBN * map);\n"
    "}\n"
    "#endif\n"
    "\n"
    "\n"
    "void main(void) {\n"
    "  // Clip plane\n"
    "#ifdef CLIPPLANE\n"
    "  if (fClipDistance > 0.0)\n"
    "  discard;\n"
    "#endif\n"
    "\n"
    "  vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\n"
    "\n"
    "  // Base color\n"
    "  vec4 baseColor = vec4(1., 1., 1., 1.);\n"
    "  vec3 diffuseColor = vDiffuseColor.rgb;\n"
    "  \n"
    "#ifdef SPECULARTERM\n"
    "  float glossiness = vSpecularColor.a;\n"
    "  vec3 specularColor = vSpecularColor.rgb;\n"
    "#else\n"
    "  float glossiness = 0.;\n"
    "#endif\n"
    "\n"
    "  // Alpha\n"
    "  float alpha = vDiffuseColor.a;\n"
    "  \n"
    "  // Bump\n"
    "#ifdef NORMAL\n"
    "  vec3 normalW = normalize(vNormalW);\n"
    "#else\n"
    "  vec3 normalW = vec3(1.0, 1.0, 1.0);\n"
    "#endif\n"
    "\n"
    "#ifdef DIFFUSE\n"
    "  baseColor = texture2D(textureSampler, vTextureUV);\n"
    "\n"
    "#if defined(BUMP) && defined(DIFFUSE)\n"
    "  normalW = perturbNormal(viewDirectionW, baseColor.rgb);\n"
    "#endif\n"
    "\n"
    "#ifdef ALPHATEST\n"
    "  if (baseColor.a < 0.4)\n"
    "  discard;\n"
    "#endif\n"
    "\n"
    "#include<depthPrePass>\n"
    "\n"
    "  baseColor.rgb *= vTextureInfos.y;\n"
    "  \n"
    "  vec4 diffuse1Color = texture2D(diffuse1Sampler, vTextureUV * diffuse1Infos);\n"
    "  vec4 diffuse2Color = texture2D(diffuse2Sampler, vTextureUV * diffuse2Infos);\n"
    "  vec4 diffuse3Color = texture2D(diffuse3Sampler, vTextureUV * diffuse3Infos);\n"
    "  \n"
    "  diffuse1Color.rgb *= baseColor.r;\n"
    "   diffuse2Color.rgb = mix(diffuse1Color.rgb, diffuse2Color.rgb, baseColor.g);\n"
    "   baseColor.rgb = mix(diffuse2Color.rgb, diffuse3Color.rgb, baseColor.b);\n"
    "  \n"
    "#endif\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "  baseColor.rgb *= vColor.rgb;\n"
    "#endif\n"
    "\n"
    "  // Lighting\n"
    "  vec3 diffuseBase = vec3(0., 0., 0.);\n"
    "  lightingInfo info;\n"
    "  float shadow = 1.;\n"
    "  \n"
    "#ifdef SPECULARTERM\n"
    "  vec3 specularBase = vec3(0., 0., 0.);\n"
    "#endif\n"
    "  #include<lightFragment>[0..maxSimultaneousLights]\n"
    "\n"
    "#ifdef VERTEXALPHA\n"
    "  alpha *= vColor.a;\n"
    "#endif\n"
    "\n"
    "#ifdef SPECULARTERM\n"
    "  vec3 finalSpecular = specularBase * specularColor;\n"
    "#else\n"
    "  vec3 finalSpecular = vec3(0.0);\n"
    "#endif\n"
    "\n"
    "  vec3 finalDiffuse = clamp(diffuseBase * diffuseColor * baseColor.rgb, 0.0, 1.0);\n"
    "\n"
    "  // Composition\n"
    "  vec4 color = vec4(finalDiffuse + finalSpecular, alpha);\n"
    "\n"
    "#include<fogFragment>\n"
    "\n"
    "  gl_FragColor = color;\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_MATERIALS_LIBRARY_TERRAIN_TERRAIN_FRAGMENT_FX_H
