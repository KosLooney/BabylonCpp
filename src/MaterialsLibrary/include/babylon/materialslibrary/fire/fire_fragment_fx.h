#ifndef BABYLON_MATERIALS_LIBRARY_FIRE_FIRE_FRAGMENT_FX_H
#define BABYLON_MATERIALS_LIBRARY_FIRE_FIRE_FRAGMENT_FX_H

namespace BABYLON {

extern const char* firePixelShader;

const char* firePixelShader
  = "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif\n"
    "\n"
    "// Constants\n"
    "uniform vec3 vEyePosition;\n"
    "\n"
    "// Input\n"
    "varying vec3 vPositionW;\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "varying vec4 vColor;\n"
    "#endif\n"
    "\n"
    "// Samplers\n"
    "#ifdef DIFFUSE\n"
    "varying vec2 vDiffuseUV;\n"
    "uniform sampler2D diffuseSampler;\n"
    "uniform vec2 vDiffuseInfos;\n"
    "#endif\n"
    "\n"
    "// Fire\n"
    "uniform sampler2D distortionSampler;\n"
    "uniform sampler2D opacitySampler;\n"
    "\n"
    "#ifdef DIFFUSE\n"
    "varying vec2 vDistortionCoords1;\n"
    "varying vec2 vDistortionCoords2;\n"
    "varying vec2 vDistortionCoords3;\n"
    "#endif\n"
    "\n"
    "#include<clipPlaneFragmentDeclaration>\n"
    "\n"
    "// Fog\n"
    "#include<fogFragmentDeclaration>\n"
    "\n"
    "vec4 bx2(vec4 x)\n"
    "{\n"
    "   return vec4(2.0) * x - vec4(1.0);\n"
    "}\n"
    "\n"
    "void main(void) {\n"
    "  // Clip plane\n"
    "#include<clipPlaneFragment>\n"
    "\n"
    "  vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\n"
    "\n"
    "  // Base color\n"
    "  vec4 baseColor = vec4(1., 1., 1., 1.);\n"
    "\n"
    "  // Alpha\n"
    "  float alpha = 1.0;\n"
    "\n"
    "#ifdef DIFFUSE\n"
    "  // Fire\n"
    "  const float distortionAmount0  = 0.092;\n"
    "  const float distortionAmount1  = 0.092;\n"
    "  const float distortionAmount2  = 0.092;\n"
    "  \n"
    "  vec2 heightAttenuation = vec2(0.3, 0.39);\n"
    "  \n"
    "  vec4 noise0 = texture2D(distortionSampler, vDistortionCoords1);\n"
    "  vec4 noise1 = texture2D(distortionSampler, vDistortionCoords2);\n"
    "  vec4 noise2 = texture2D(distortionSampler, vDistortionCoords3);\n"
    "  \n"
    "  vec4 noiseSum = bx2(noise0) * distortionAmount0 + bx2(noise1) * distortionAmount1 + bx2(noise2) * distortionAmount2;\n"
    "  \n"
    "  vec4 perturbedBaseCoords = vec4(vDiffuseUV, 0.0, 1.0) + noiseSum * (vDiffuseUV.y * heightAttenuation.x + heightAttenuation.y);\n"
    "  \n"
    "  vec4 opacityColor = texture2D(opacitySampler, perturbedBaseCoords.xy);\n"
    "  \n"
    "#ifdef ALPHATEST\n"
    "  if (opacityColor.r < 0.1)\n"
    "  discard;\n"
    "#endif\n"
    "\n"
    "#include<depthPrePass>\n"
    "  \n"
    "  baseColor = texture2D(diffuseSampler, perturbedBaseCoords.xy) * 2.0;\n"
    "  baseColor *= opacityColor;\n"
    "\n"
    "  baseColor.rgb *= vDiffuseInfos.y;\n"
    "#endif\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "  baseColor.rgb *= vColor.rgb;\n"
    "#endif\n"
    "\n"
    "  // Lighting\n"
    "  vec3 diffuseBase = vec3(1.0, 1.0, 1.0);\n"
    "\n"
    "#ifdef VERTEXALPHA\n"
    "  alpha *= vColor.a;\n"
    "#endif\n"
    "\n"
    "  // Composition\n"
    "  vec4 color = vec4(baseColor.rgb, alpha);\n"
    "\n"
    "#include<fogFragment>\n"
    "\n"
    "  gl_FragColor = color;\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_MATERIALS_LIBRARY_FIRE_FIRE_FRAGMENT_FX_H
