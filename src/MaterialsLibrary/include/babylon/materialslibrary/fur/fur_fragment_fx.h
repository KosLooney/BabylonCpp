#ifndef BABYLON_MATERIALS_LIBRARY_FUR_FUR_FRAGMENT_FX_H
#define BABYLON_MATERIALS_LIBRARY_FUR_FUR_FRAGMENT_FX_H

namespace BABYLON {

extern const char* furPixelShader;

const char* furPixelShader
  = "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif\n"
    "\n"
    "// Constants\n"
    "uniform vec3 vEyePosition;\n"
    "uniform vec4 vDiffuseColor;\n"
    "\n"
    "// Input\n"
    "uniform vec4 furColor;\n"
    "uniform float furLength;\n"
    "varying vec3 vPositionW;\n"
    "varying float vfur_length;\n"
    "\n"
    "#ifdef NORMAL\n"
    "varying vec3 vNormalW;\n"
    "#endif\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "varying vec4 vColor;\n"
    "#endif\n"
    "\n"
    "// Helper functions\n"
    "#include<helperFunctions>\n"
    "\n"
    "// Lights\n"
    "#include<__decl__lightFragment>[0..maxSimultaneousLights]\n"
    "\n"
    "// Samplers\n"
    "#ifdef DIFFUSE\n"
    "varying vec2 vDiffuseUV;\n"
    "uniform sampler2D diffuseSampler;\n"
    "uniform vec2 vDiffuseInfos;\n"
    "#endif\n"
    "\n"
    "// Fur uniforms\n"
    "#ifdef HIGHLEVEL\n"
    "uniform float furOffset;\n"
    "uniform float furOcclusion;\n"
    "uniform sampler2D furTexture;\n"
    "\n"
    "varying vec2 vFurUV;\n"
    "#endif\n"
    "\n"
    "#include<lightsFragmentFunctions>\n"
    "#include<shadowsFragmentFunctions>\n"
    "#include<fogFragmentDeclaration>\n"
    "#include<clipPlaneFragmentDeclaration>\n"
    "\n"
    "float Rand(vec3 rv) {\n"
    "  float x = dot(rv, vec3(12.9898,78.233, 24.65487));\n"
    "  return fract(sin(x) * 43758.5453);\n"
    "}\n"
    "\n"
    "void main(void) {\n"
    "  // Clip plane\n"
    "  #include<clipPlaneFragment>\n"
    "  \n"
    "  vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\n"
    "\n"
    "  // Base color\n"
    "  vec4 baseColor = furColor;\n"
    "  vec3 diffuseColor = vDiffuseColor.rgb;\n"
    "\n"
    "  // Alpha\n"
    "  float alpha = vDiffuseColor.a;\n"
    "\n"
    "#ifdef DIFFUSE\n"
    "  baseColor *= texture2D(diffuseSampler, vDiffuseUV);\n"
    "  \n"
    "#ifdef ALPHATEST\n"
    "  if (baseColor.a < 0.4)\n"
    "  discard;\n"
    "#endif\n"
    "\n"
    "#include<depthPrePass>\n"
    "\n"
    "  baseColor.rgb *= vDiffuseInfos.y;\n"
    "#endif\n"
    "\n"
    "#ifdef VERTEXCOLOR\n"
    "  baseColor.rgb *= vColor.rgb;\n"
    "#endif\n"
    "\n"
    "  // Bump\n"
    "#ifdef NORMAL\n"
    "  vec3 normalW = normalize(vNormalW);\n"
    "#else\n"
    "  vec3 normalW = vec3(1.0, 1.0, 1.0);\n"
    "#endif\n"
    "\n"
    "  #ifdef HIGHLEVEL\n"
    "  // Fur\n"
    "  vec4 furTextureColor = texture2D(furTexture, vec2(vFurUV.x, vFurUV.y));\n"
    "  \n"
    "  if (furTextureColor.a <= 0.0 || furTextureColor.g < furOffset) {\n"
    "  discard;\n"
    "  }\n"
    "  \n"
    "  float occlusion = mix(0.0, furTextureColor.b * 1.2, furOffset);\n"
    "  \n"
    "  baseColor = vec4(baseColor.xyz * max(occlusion, furOcclusion), 1.1 - furOffset);\n"
    "  #endif\n"
    "\n"
    "  // Lighting\n"
    "  vec3 diffuseBase = vec3(0., 0., 0.);\n"
    "  lightingInfo info;\n"
    "\n"
    "  float shadow = 1.;\n"
    "  float glossiness = 0.;\n"
    "\n"
    "#ifdef SPECULARTERM\n"
    "  vec3 specularBase = vec3(0., 0., 0.);\n"
    "#endif\n"
    "\n"
    "  #include<lightFragment>[0..maxSimultaneousLights]\n"
    "\n"
    "#ifdef VERTEXALPHA\n"
    "  alpha *= vColor.a;\n"
    "#endif\n"
    "\n"
    "  vec3 finalDiffuse = clamp(diffuseBase.rgb * baseColor.rgb, 0.0, 1.0);\n"
    "\n"
    "  // Composition\n"
    "  #ifdef HIGHLEVEL\n"
    "  vec4 color = vec4(finalDiffuse, alpha);\n"
    "  #else\n"
    "  float r = vfur_length / furLength * 0.5;\n"
    "  vec4 color = vec4(finalDiffuse * (0.5 + r), alpha);\n"
    "  #endif\n"
    "  \n"
    "#include<fogFragment>\n"
    "\n"
    "  gl_FragColor = color;\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_MATERIALS_LIBRARY_FUR_FUR_FRAGMENT_FX_H
